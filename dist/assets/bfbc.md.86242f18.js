import{_ as s,o as n,c as a,O as l}from"./chunks/framework.4afe7240.js";const p="/assets/1.3ed477c7.jpeg",o="/assets/2.4128ebed.png",e="/assets/联机批处理系统.077e5c29.png",t="/assets/脱机批处理系统.4053619c.png",B="/assets/多道技术.39199ed8.png",c="/assets/时间段切片_多级反馈队列.112ba183.png",r="/assets/进程三状态图.b7030e70.png",y="/assets/阻塞IO模型-导出.f2909806.png",i="/assets/非阻塞IO模型-导出-8709183.02c9487b.png",F="/assets/IO多路复用-导出.60fc1671.png",A="/assets/异步IO模型-导出.3c74c0eb.png",b=JSON.parse('{"title":"并发编程","description":"","frontmatter":{},"headers":[],"relativePath":"bfbc.md","filePath":"bfbc.md","lastUpdated":1684680005000}'),C={name:"bfbc.md"},D=l(`<h1 id="并发编程" tabindex="-1">并发编程 <a class="header-anchor" href="#并发编程" aria-label="Permalink to &quot;并发编程&quot;">​</a></h1><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#ABB2BF;">coding: utf</span><span style="color:#56B6C2;">-</span><span style="color:#D19A66;">8</span></span>
<span class="line"><span style="color:#61AFEF;">@Author</span><span style="color:#FFFFFF;">: 小飞有点东西</span></span>
<span class="line"><span style="color:#ABB2BF;">资料下载：https:</span><span style="color:#56B6C2;">//</span><span style="color:#ABB2BF;">active.clewm.net</span><span style="color:#56B6C2;">/</span><span style="color:#ABB2BF;">FrcyFA</span></span></code></pre></div><h2 id="后续建议" tabindex="-1">后续建议 <a class="header-anchor" href="#后续建议" aria-label="Permalink to &quot;后续建议&quot;">​</a></h2><div class="language-tex"><button title="Copy Code" class="copy"></button><span class="lang">tex</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#ABB2BF;">服务器</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">并发编程</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">懂得取舍，是什么，做什么，怎么用</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">知识面的广度，自我解决问题的能力</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">基本概念，理解，哪怕这个概念不是很正确</span></span></code></pre></div><h2 id="操作系统发展史" tabindex="-1">操作系统发展史 <a class="header-anchor" href="#操作系统发展史" aria-label="Permalink to &quot;操作系统发展史&quot;">​</a></h2><div class="language-tex"><button title="Copy Code" class="copy"></button><span class="lang">tex</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#ABB2BF;">1946年</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">18000个电子管，170平米</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">程序员</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">码农</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">码畜</span></span></code></pre></div><h2 id="穿孔卡片" tabindex="-1">穿孔卡片 <a class="header-anchor" href="#穿孔卡片" aria-label="Permalink to &quot;穿孔卡片&quot;">​</a></h2><p><img src="`+p+'" alt="脱机批处理系统"></p><p><img src="'+o+'" alt="2"></p><h2 id="联机批处理系统" tabindex="-1">联机批处理系统 <a class="header-anchor" href="#联机批处理系统" aria-label="Permalink to &quot;联机批处理系统&quot;">​</a></h2><p><img src="'+e+'" alt="联机批处理系统"></p><h2 id="脱机批处理系统" tabindex="-1">脱机批处理系统 <a class="header-anchor" href="#脱机批处理系统" aria-label="Permalink to &quot;脱机批处理系统&quot;">​</a></h2><p><img src="'+t+'" alt="脱机批处理系统"></p><h2 id="多道技术" tabindex="-1">多道技术 <a class="header-anchor" href="#多道技术" aria-label="Permalink to &quot;多道技术&quot;">​</a></h2><ul><li><p>目的：让单核实现并发效果</p></li><li><p>并发：看起来像同时运行的</p></li><li><p>并行：真正意义上的同时执行</p></li><li><p>单核不能实现并行，但可以实现并发</p></li><li><p>多道：允许多个应用程序同时进入内存，并且cpu交替执行</p><p><img src="'+B+'" alt="多道技术"></p></li><li><p>核心：切换+保存状态</p></li><li><p>cpu切换的时候，分两种情况</p><ul><li>当一个程序遇到I/O操作的时候，操作系统会剥夺该程序cpu的执行权限</li><li>当一个程序长时间占用cpu的时候，操作系统也会剥夺该程序cpu的执行权限</li></ul></li></ul><h2 id="进程" tabindex="-1">进程 <a class="header-anchor" href="#进程" aria-label="Permalink to &quot;进程&quot;">​</a></h2><ul><li><p>程序：存在硬盘上的一堆代码，它是&#39;死&#39;的</p></li><li><p>进程：表示程序正在执行的过程，它是&#39;活&#39;的</p></li></ul><p>Ps:内存里有一个微信程序正在运行</p><p>Ps:微信进程，pycharm进程</p><h2 id="进程调度" tabindex="-1">进程调度 <a class="header-anchor" href="#进程调度" aria-label="Permalink to &quot;进程调度&quot;">​</a></h2><ul><li><p>先来先服务调度算法</p><ul><li><div class="language-tex"><button title="Copy Code" class="copy"></button><span class="lang">tex</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#ABB2BF;">3秒，3小时，3秒，3秒，对长作业友好，对短作业不友好</span></span></code></pre></div></li></ul></li><li><p>短作业优先调度算法</p><ul><li><div class="language-tex"><button title="Copy Code" class="copy"></button><span class="lang">tex</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#ABB2BF;">3秒，。。。。。。。3秒，3小时，对短作业友好，对长作业不友好</span></span></code></pre></div></li></ul></li><li><p>时间片轮转法+多级反馈队列</p><ul><li>越往下,任务的优先级越低</li><li>越往下,任务的耗时越长</li></ul><p><img src="'+c+'" alt="脱机批处理系统"></p></li></ul><h2 id="进程的三状态图" tabindex="-1">进程的三状态图 <a class="header-anchor" href="#进程的三状态图" aria-label="Permalink to &quot;进程的三状态图&quot;">​</a></h2><p><img src="'+r+`" alt="脱机批处理系统"></p><h2 id="同步和异步" tabindex="-1">同步和异步 <a class="header-anchor" href="#同步和异步" aria-label="Permalink to &quot;同步和异步&quot;">​</a></h2><p>用来描述任务的提交方式</p><ul><li>同步: 任务提交之后,原地等待任务的返回结果,等待的过程中不做任何事情</li><li>异步: 任务提交之后,不在原地等待任务的返回结果,而是直接去做其他事情</li></ul><h2 id="阻塞和非阻塞" tabindex="-1">阻塞和非阻塞 <a class="header-anchor" href="#阻塞和非阻塞" aria-label="Permalink to &quot;阻塞和非阻塞&quot;">​</a></h2><p>描述进程的运行状态</p><ul><li>阻塞: 阻塞态</li><li>非阻塞: 就绪态、运行态</li></ul><p>同步阻塞、同步非阻塞、异步阻塞、<strong>异步非阻塞</strong></p><h2 id="创建进程" tabindex="-1">创建进程 <a class="header-anchor" href="#创建进程" aria-label="Permalink to &quot;创建进程&quot;">​</a></h2><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#98C379;">&#39;&#39;&#39;</span></span>
<span class="line"><span style="color:#98C379;">os.fork()</span></span>
<span class="line"><span style="color:#98C379;">multiprocessing</span></span>
<span class="line"><span style="color:#98C379;">subprocess</span></span>
<span class="line"><span style="color:#98C379;">&#39;&#39;&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 方式1</span></span>
<span class="line"><span style="color:#C678DD;font-style:italic;">from</span><span style="color:#ABB2BF;"> multiprocessing </span><span style="color:#C678DD;font-style:italic;">import</span><span style="color:#ABB2BF;"> Process</span></span>
<span class="line"><span style="color:#C678DD;font-style:italic;">import</span><span style="color:#ABB2BF;"> time</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">func</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;font-style:italic;">name</span><span style="color:#ABB2BF;">):</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">f</span><span style="color:#98C379;">&#39;</span><span style="color:#D19A66;">{</span><span style="color:#ABB2BF;">name</span><span style="color:#D19A66;">}</span><span style="color:#98C379;">任务开始&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    time.</span><span style="color:#61AFEF;">sleep</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">f</span><span style="color:#98C379;">&#39;</span><span style="color:#D19A66;">{</span><span style="color:#ABB2BF;">name</span><span style="color:#D19A66;">}</span><span style="color:#98C379;">任务执行完毕&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;font-style:italic;">if</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">__name__</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">==</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;__main__&#39;</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;"># 1、得到进程操作对象</span></span>
<span class="line"><span style="color:#ABB2BF;">    p </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Process</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">target</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">func, </span><span style="color:#E06C75;font-style:italic;">args</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;写讲话稿&#39;</span><span style="color:#ABB2BF;">,))</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;"># 2、创建进程</span></span>
<span class="line"><span style="color:#ABB2BF;">    p.</span><span style="color:#61AFEF;">start</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;主进程&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 方式2</span></span>
<span class="line"><span style="color:#C678DD;font-style:italic;">from</span><span style="color:#ABB2BF;"> multiprocessing </span><span style="color:#C678DD;font-style:italic;">import</span><span style="color:#ABB2BF;"> Process</span></span>
<span class="line"><span style="color:#C678DD;font-style:italic;">import</span><span style="color:#ABB2BF;"> time</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">MyProcess</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Process</span><span style="color:#ABB2BF;">):</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">__init__</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;font-style:italic;">self</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;font-style:italic;">name</span><span style="color:#ABB2BF;">):</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#56B6C2;">super</span><span style="color:#ABB2BF;">().</span><span style="color:#56B6C2;">__init__</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;">.task_name </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> name</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">run</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;font-style:italic;">self</span><span style="color:#ABB2BF;">):</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">f</span><span style="color:#98C379;">&#39;</span><span style="color:#D19A66;">{</span><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;">.task_name</span><span style="color:#D19A66;">}</span><span style="color:#98C379;">任务开始&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">        time.</span><span style="color:#61AFEF;">sleep</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;任务结束&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;font-style:italic;">if</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">__name__</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">==</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;__main__&#39;</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;">    p </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">MyProcess</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;约会&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    p.</span><span style="color:#61AFEF;">start</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;主进程&#39;</span><span style="color:#ABB2BF;">)</span></span></code></pre></div><p><strong>总结</strong>: 创建进程就是在内存中申请一块内存空间,然后把需要运行的代码放进去,多个进程的内存空间,它们彼此是隔离的,进程与进程之间的数据,它们是没办法直接交互的,如果想要交互,则可以借助第三方工具/模块</p><h2 id="join方法" tabindex="-1">join方法 <a class="header-anchor" href="#join方法" aria-label="Permalink to &quot;join方法&quot;">​</a></h2><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># coding: utf-8</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># @Author: 小飞有点东西</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 资料下载：https://active.clewm.net/FrcyFA</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># # 方式1</span></span>
<span class="line"><span style="color:#C678DD;font-style:italic;">from</span><span style="color:#ABB2BF;"> multiprocessing </span><span style="color:#C678DD;font-style:italic;">import</span><span style="color:#ABB2BF;"> Process</span></span>
<span class="line"><span style="color:#C678DD;font-style:italic;">import</span><span style="color:#ABB2BF;"> time</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">func</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;font-style:italic;">name</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;font-style:italic;">n</span><span style="color:#ABB2BF;">):</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">f</span><span style="color:#98C379;">&#39;</span><span style="color:#D19A66;">{</span><span style="color:#ABB2BF;">name</span><span style="color:#D19A66;">}</span><span style="color:#98C379;">任务开始&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    time.</span><span style="color:#61AFEF;">sleep</span><span style="color:#ABB2BF;">(n)</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">f</span><span style="color:#98C379;">&#39;</span><span style="color:#D19A66;">{</span><span style="color:#ABB2BF;">name</span><span style="color:#D19A66;">}</span><span style="color:#98C379;">任务执行完毕&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;font-style:italic;">if</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">__name__</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">==</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;__main__&#39;</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;">    start </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> time.</span><span style="color:#61AFEF;">time</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;"># p1 = Process(target=func, args=(&#39;写讲话稿1&#39;, 1))</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;"># p2 = Process(target=func, args=(&#39;写讲话稿2&#39;, 2))</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;"># p3 = Process(target=func, args=(&#39;写讲话稿3&#39;, 3))</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;"># p1.start()</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;"># p2.start()</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;"># p3.start()</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;"># p1.join()</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;"># p2.join()</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;"># p3.join()</span></span>
<span class="line"><span style="color:#ABB2BF;">    l </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> []</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;font-style:italic;">for</span><span style="color:#ABB2BF;"> i </span><span style="color:#C678DD;font-style:italic;">in</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">range</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">):</span></span>
<span class="line"><span style="color:#ABB2BF;">        p </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Process</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">target</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">func, </span><span style="color:#E06C75;font-style:italic;">args</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">f</span><span style="color:#98C379;">&#39;写讲话稿</span><span style="color:#D19A66;">{</span><span style="color:#ABB2BF;">i</span><span style="color:#D19A66;">}</span><span style="color:#98C379;">&#39;</span><span style="color:#ABB2BF;">, i))</span></span>
<span class="line"><span style="color:#ABB2BF;">        p.</span><span style="color:#61AFEF;">start</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">        l.</span><span style="color:#61AFEF;">append</span><span style="color:#ABB2BF;">(p)</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;font-style:italic;">for</span><span style="color:#ABB2BF;"> p </span><span style="color:#C678DD;font-style:italic;">in</span><span style="color:#ABB2BF;"> l:</span></span>
<span class="line"><span style="color:#ABB2BF;">        p.</span><span style="color:#61AFEF;">join</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;主进程&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    end </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> time.</span><span style="color:#61AFEF;">time</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(end </span><span style="color:#56B6C2;">-</span><span style="color:#ABB2BF;"> start)</span></span></code></pre></div><h2 id="进程之间数据隔离" tabindex="-1">进程之间数据隔离 <a class="header-anchor" href="#进程之间数据隔离" aria-label="Permalink to &quot;进程之间数据隔离&quot;">​</a></h2><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># coding: utf-8</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># @Author: 小飞有点东西</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 资料下载：https://active.clewm.net/FrcyFA</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;font-style:italic;">from</span><span style="color:#ABB2BF;"> multiprocessing </span><span style="color:#C678DD;font-style:italic;">import</span><span style="color:#ABB2BF;"> Process</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">age </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">18</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">func</span><span style="color:#ABB2BF;">():</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">global</span><span style="color:#ABB2BF;"> age</span></span>
<span class="line"><span style="color:#ABB2BF;">    age </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">16</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;font-style:italic;">if</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">__name__</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">==</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;__main__&#39;</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;">    p </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Process</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">target</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">func)</span></span>
<span class="line"><span style="color:#ABB2BF;">    p.</span><span style="color:#61AFEF;">start</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">    p.</span><span style="color:#61AFEF;">join</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(age)</span></span></code></pre></div><h2 id="进程号" tabindex="-1">进程号 <a class="header-anchor" href="#进程号" aria-label="Permalink to &quot;进程号&quot;">​</a></h2><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># pid号（进程号）</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;font-style:italic;">from</span><span style="color:#ABB2BF;"> multiprocessing </span><span style="color:#C678DD;font-style:italic;">import</span><span style="color:#ABB2BF;"> Process, current_process</span></span>
<span class="line"><span style="color:#C678DD;font-style:italic;">import</span><span style="color:#ABB2BF;"> time</span></span>
<span class="line"><span style="color:#C678DD;font-style:italic;">import</span><span style="color:#ABB2BF;"> os</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">task</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;font-style:italic;">name</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&#39;子进程&#39;</span><span style="color:#ABB2BF;">):</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;"># print(f&#39;任务{current_process().pid}执行中&#39;)</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">f</span><span style="color:#98C379;">&#39;</span><span style="color:#D19A66;">{</span><span style="color:#ABB2BF;">name</span><span style="color:#D19A66;">}{</span><span style="color:#ABB2BF;">os.</span><span style="color:#61AFEF;">getpid</span><span style="color:#ABB2BF;">()</span><span style="color:#D19A66;">}</span><span style="color:#98C379;">执行中&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">f</span><span style="color:#98C379;">&#39;</span><span style="color:#D19A66;">{</span><span style="color:#ABB2BF;">name</span><span style="color:#D19A66;">}</span><span style="color:#98C379;">的父进程</span><span style="color:#D19A66;">{</span><span style="color:#ABB2BF;">os.</span><span style="color:#61AFEF;">getppid</span><span style="color:#ABB2BF;">()</span><span style="color:#D19A66;">}</span><span style="color:#98C379;">执行中&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;"># time.sleep(100)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;font-style:italic;">if</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">__name__</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">==</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;__main__&#39;</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;">    p </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Process</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">target</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">task)</span></span>
<span class="line"><span style="color:#ABB2BF;">    p.</span><span style="color:#61AFEF;">start</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">    p.</span><span style="color:#61AFEF;">terminate</span><span style="color:#ABB2BF;">()   </span><span style="color:#7F848E;font-style:italic;"># 杀死当前进程（win: taskkill pid,  mac/linux: kill -9 pid)</span></span>
<span class="line"><span style="color:#ABB2BF;">    time.</span><span style="color:#61AFEF;">sleep</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0.001</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(p.</span><span style="color:#61AFEF;">is_alive</span><span style="color:#ABB2BF;">())</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;主进程&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;"># task(&#39;主进程&#39;)</span></span></code></pre></div><h2 id="僵尸进程和孤儿进程" tabindex="-1">僵尸进程和孤儿进程 <a class="header-anchor" href="#僵尸进程和孤儿进程" aria-label="Permalink to &quot;僵尸进程和孤儿进程&quot;">​</a></h2><p>了解</p><ul><li><p>僵尸进程</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#98C379;">&#39;&#39;&#39;</span></span>
<span class="line"><span style="color:#98C379;">子进程死后,还会有一些资源占用(进程号,进程运行状态,运行时间等),等待父进程通过系统调用回收(收尸)</span></span>
<span class="line"><span style="color:#98C379;">除了init进程之外,所有的进程,最后都会步入僵尸进程</span></span>
<span class="line"><span style="color:#98C379;">危害:</span></span>
<span class="line"><span style="color:#98C379;">	子进程退出之后,父进程没有及时处理,僵尸进程就会一直占用计算机资源</span></span>
<span class="line"><span style="color:#98C379;">	如果产生了大量的僵尸进程,资源过度占用,系统没有可用的进程号,导致系统不能产生新的进程</span></span>
<span class="line"><span style="color:#98C379;">&#39;&#39;&#39;</span></span></code></pre></div></li><li><p>孤儿进程</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#98C379;">&#39;&#39;&#39;</span></span>
<span class="line"><span style="color:#98C379;">子进程处于存活状态,但是父进程意外死亡</span></span>
<span class="line"><span style="color:#98C379;">操作系统会开设一个“孤儿院”(init进程),用来管理孤儿进程,回收孤儿进程的相关资源</span></span>
<span class="line"><span style="color:#98C379;">&#39;&#39;&#39;</span></span></code></pre></div></li></ul><h2 id="守护进程" tabindex="-1">守护进程 <a class="header-anchor" href="#守护进程" aria-label="Permalink to &quot;守护进程&quot;">​</a></h2><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># coding: utf-8</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># @Author: 小飞有点东西</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 资料下载：https://active.clewm.net/FrcyFA</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;font-style:italic;">from</span><span style="color:#ABB2BF;"> multiprocessing </span><span style="color:#C678DD;font-style:italic;">import</span><span style="color:#ABB2BF;"> Process</span></span>
<span class="line"><span style="color:#C678DD;font-style:italic;">import</span><span style="color:#ABB2BF;"> time</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">task</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;font-style:italic;">name</span><span style="color:#ABB2BF;">):</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">f</span><span style="color:#98C379;">&#39;</span><span style="color:#D19A66;">{</span><span style="color:#ABB2BF;">name</span><span style="color:#D19A66;">}</span><span style="color:#98C379;">还活着&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    time.</span><span style="color:#61AFEF;">sleep</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">f</span><span style="color:#98C379;">&#39;</span><span style="color:#D19A66;">{</span><span style="color:#ABB2BF;">name</span><span style="color:#D19A66;">}</span><span style="color:#98C379;">正常死亡&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;font-style:italic;">if</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">__name__</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">==</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;__main__&#39;</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;">    p </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Process</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">target</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">task, </span><span style="color:#E06C75;font-style:italic;">kwargs</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">{</span><span style="color:#98C379;">&#39;name&#39;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;苏妲己&#39;</span><span style="color:#ABB2BF;">})</span></span>
<span class="line"><span style="color:#ABB2BF;">    p.daemon </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">True</span></span>
<span class="line"><span style="color:#ABB2BF;">    p.</span><span style="color:#61AFEF;">start</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">    time.</span><span style="color:#61AFEF;">sleep</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;纣王驾崩了&#39;</span><span style="color:#ABB2BF;">)</span></span></code></pre></div><h2 id="互斥锁" tabindex="-1">互斥锁 <a class="header-anchor" href="#互斥锁" aria-label="Permalink to &quot;互斥锁&quot;">​</a></h2><p>当多个进程操作同一份数据的时候,会出现数据错乱的问题,解决方法就是加锁处理:</p><p><strong>把并发变成串行,虽然牺牲了运行效率,但是保证了数据的安全</strong></p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># coding: utf-8</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># @Author: 小飞有点东西</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 资料下载：https://active.clewm.net/FrcyFA</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;font-style:italic;">from</span><span style="color:#ABB2BF;"> multiprocessing </span><span style="color:#C678DD;font-style:italic;">import</span><span style="color:#ABB2BF;"> Process, Lock</span></span>
<span class="line"><span style="color:#C678DD;font-style:italic;">import</span><span style="color:#ABB2BF;"> time</span></span>
<span class="line"><span style="color:#C678DD;font-style:italic;">import</span><span style="color:#ABB2BF;"> json</span></span>
<span class="line"><span style="color:#C678DD;font-style:italic;">import</span><span style="color:#ABB2BF;"> random</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 查票</span></span>
<span class="line"><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">search_ticket</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;font-style:italic;">name</span><span style="color:#ABB2BF;">):</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;"># 读取文件，查询车票数量</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;font-style:italic;">with</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">open</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;data/tickets&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;r&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">encoding</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&#39;utf-8&#39;</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;font-style:italic;">as</span><span style="color:#ABB2BF;"> f:</span></span>
<span class="line"><span style="color:#ABB2BF;">        dic </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> json.</span><span style="color:#61AFEF;">load</span><span style="color:#ABB2BF;">(f)</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">f</span><span style="color:#98C379;">&#39;用户</span><span style="color:#D19A66;">{</span><span style="color:#ABB2BF;">name</span><span style="color:#D19A66;">}</span><span style="color:#98C379;">查询余票：</span><span style="color:#D19A66;">{</span><span style="color:#ABB2BF;">dic.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;tickets_num&quot;</span><span style="color:#ABB2BF;">)</span><span style="color:#D19A66;">}</span><span style="color:#98C379;">&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 买票</span></span>
<span class="line"><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">buy_ticket</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;font-style:italic;">name</span><span style="color:#ABB2BF;">):</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;font-style:italic;">with</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">open</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;data/tickets&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;r&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">encoding</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&#39;utf-8&#39;</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;font-style:italic;">as</span><span style="color:#ABB2BF;"> f:</span></span>
<span class="line"><span style="color:#ABB2BF;">        dic </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> json.</span><span style="color:#61AFEF;">load</span><span style="color:#ABB2BF;">(f)</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;"># 模拟网络延迟</span></span>
<span class="line"><span style="color:#ABB2BF;">    time.</span><span style="color:#61AFEF;">sleep</span><span style="color:#ABB2BF;">(random.</span><span style="color:#61AFEF;">randint</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;font-style:italic;">if</span><span style="color:#ABB2BF;"> dic.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;tickets_num&#39;</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;">        dic[</span><span style="color:#98C379;">&#39;tickets_num&#39;</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">-=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;font-style:italic;">with</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">open</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;data/tickets&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;w&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">encoding</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&#39;utf-8&#39;</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;font-style:italic;">as</span><span style="color:#ABB2BF;"> f:</span></span>
<span class="line"><span style="color:#ABB2BF;">            json.</span><span style="color:#61AFEF;">dump</span><span style="color:#ABB2BF;">(dic, f)</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">f</span><span style="color:#98C379;">&#39;用户</span><span style="color:#D19A66;">{</span><span style="color:#ABB2BF;">name</span><span style="color:#D19A66;">}</span><span style="color:#98C379;">买票成功&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;font-style:italic;">else</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">f</span><span style="color:#98C379;">&#39;余票不足，用户</span><span style="color:#D19A66;">{</span><span style="color:#ABB2BF;">name</span><span style="color:#D19A66;">}</span><span style="color:#98C379;">买票失败&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">task</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;font-style:italic;">name</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;font-style:italic;">mutex</span><span style="color:#ABB2BF;">):</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">search_ticket</span><span style="color:#ABB2BF;">(name)</span></span>
<span class="line"><span style="color:#ABB2BF;">    mutex.</span><span style="color:#61AFEF;">acquire</span><span style="color:#ABB2BF;">()  </span><span style="color:#7F848E;font-style:italic;"># 抢锁</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">buy_ticket</span><span style="color:#ABB2BF;">(name)</span></span>
<span class="line"><span style="color:#ABB2BF;">    mutex.</span><span style="color:#61AFEF;">release</span><span style="color:#ABB2BF;">()  </span><span style="color:#7F848E;font-style:italic;"># 释放锁</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;font-style:italic;">if</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">__name__</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">==</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;__main__&#39;</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;">    mutex </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Lock</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;font-style:italic;">for</span><span style="color:#ABB2BF;"> i </span><span style="color:#C678DD;font-style:italic;">in</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">range</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">9</span><span style="color:#ABB2BF;">):</span></span>
<span class="line"><span style="color:#ABB2BF;">        p </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Process</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">target</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">task, </span><span style="color:#E06C75;font-style:italic;">args</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">(i, mutex))</span></span>
<span class="line"><span style="color:#ABB2BF;">        p.</span><span style="color:#61AFEF;">start</span><span style="color:#ABB2BF;">()</span></span></code></pre></div><p>ps: 行锁、表锁</p><p><u>注意:不要轻易加锁,加锁只应该在争抢数据的环节加</u></p><h2 id="消息队列" tabindex="-1">消息队列 <a class="header-anchor" href="#消息队列" aria-label="Permalink to &quot;消息队列&quot;">​</a></h2><p><strong>队列:先进先出</strong></p><p>​ 管道+锁</p><p>堆栈:后进先出</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># coding: utf-8</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># @Author: 小飞有点东西</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 资料下载：https://active.clewm.net/FrcyFA</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># import queue</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># queue.Queue()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># from multiprocessing import queues</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># queues.Queue()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;font-style:italic;">from</span><span style="color:#ABB2BF;"> multiprocessing </span><span style="color:#C678DD;font-style:italic;">import</span><span style="color:#ABB2BF;"> Queue</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">q </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Queue</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">6</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">q.</span><span style="color:#61AFEF;">put</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;a&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">q.</span><span style="color:#61AFEF;">put</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;b&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">q.</span><span style="color:#61AFEF;">put</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;c&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">q.</span><span style="color:#61AFEF;">put</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;d&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># print(q.full())</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># print(q.empty())</span></span>
<span class="line"><span style="color:#ABB2BF;">q.</span><span style="color:#61AFEF;">put</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;e&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">q.</span><span style="color:#61AFEF;">put</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;f&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># q.put(&#39;g&#39;, timeout=3)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># q.put_nowait(&#39;g&#39;)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># print(q.full())</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">v1 </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> q.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">v2 </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> q.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">v3 </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> q.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">v4 </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> q.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">v5 </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> q.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">v6 </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> q.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># v7 = q.get(timeout=3)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># q.get_nowait()</span></span>
<span class="line"><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(v1, v2, v3, v4, v5, v6)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(q.</span><span style="color:#61AFEF;">empty</span><span style="color:#ABB2BF;">())</span></span>
<span class="line"></span>
<span class="line"><span style="color:#98C379;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#98C379;">q.put()</span></span>
<span class="line"><span style="color:#98C379;">q.get()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#98C379;">再多进程的条件下不够准确</span></span>
<span class="line"><span style="color:#98C379;">q.put_nowait()</span></span>
<span class="line"><span style="color:#98C379;">q.get_nowait()</span></span>
<span class="line"><span style="color:#98C379;">q.full()</span></span>
<span class="line"><span style="color:#98C379;">q.empty()</span></span>
<span class="line"><span style="color:#98C379;">&quot;&quot;&quot;</span></span></code></pre></div><h2 id="进程间的通信-ipc机制" tabindex="-1">进程间的通信(IPC机制) <a class="header-anchor" href="#进程间的通信-ipc机制" aria-label="Permalink to &quot;进程间的通信(IPC机制)&quot;">​</a></h2><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># coding: utf-8</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># @Author: 小飞有点东西</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 资料下载：https://active.clewm.net/FrcyFA</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;font-style:italic;">from</span><span style="color:#ABB2BF;"> multiprocessing </span><span style="color:#C678DD;font-style:italic;">import</span><span style="color:#ABB2BF;"> Process, Queue</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">task1</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;font-style:italic;">q</span><span style="color:#ABB2BF;">):</span></span>
<span class="line"><span style="color:#ABB2BF;">    q.</span><span style="color:#61AFEF;">put</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;宫爆鸡丁&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">task2</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;font-style:italic;">q</span><span style="color:#ABB2BF;">):</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(q.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">())</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;font-style:italic;">if</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">__name__</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">==</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;__main__&#39;</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;">    q </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Queue</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">    p1 </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Process</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">target</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">task1, </span><span style="color:#E06C75;font-style:italic;">args</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">(q,))</span></span>
<span class="line"><span style="color:#ABB2BF;">    p2 </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Process</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">target</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">task2, </span><span style="color:#E06C75;font-style:italic;">args</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">(q,))</span></span>
<span class="line"><span style="color:#ABB2BF;">    p1.</span><span style="color:#61AFEF;">start</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">    p2.</span><span style="color:#61AFEF;">start</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;"># print(q.get())</span></span></code></pre></div><h2 id="生产者消费者模型" tabindex="-1">生产者消费者模型 <a class="header-anchor" href="#生产者消费者模型" aria-label="Permalink to &quot;生产者消费者模型&quot;">​</a></h2><p>生产者（厨师）：生产或者制造数据的</p><p>消费者（顾客）：消费或者处理数据的</p><p>媒介（桌子）：消息队列</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># coding: utf-8</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># @Author: 小飞有点东西</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 资料下载：https://active.clewm.net/FrcyFA</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;font-style:italic;">from</span><span style="color:#ABB2BF;"> multiprocessing </span><span style="color:#C678DD;font-style:italic;">import</span><span style="color:#ABB2BF;"> Process, Queue, JoinableQueue</span></span>
<span class="line"><span style="color:#C678DD;font-style:italic;">import</span><span style="color:#ABB2BF;"> time</span></span>
<span class="line"><span style="color:#C678DD;font-style:italic;">import</span><span style="color:#ABB2BF;"> random</span></span>
<span class="line"></span>
<span class="line"><span style="color:#98C379;">&#39;&#39;&#39;</span></span>
<span class="line"><span style="color:#98C379;">JoinableQueue</span></span>
<span class="line"><span style="color:#98C379;">在Queue的基础上多了一个计数器机制，每put一个数据，计数器就加一</span></span>
<span class="line"><span style="color:#98C379;">每调用一次task_done，计数器就减一</span></span>
<span class="line"><span style="color:#98C379;">当计数器为0的时候，就会走q.join后面的代码</span></span>
<span class="line"><span style="color:#98C379;">&#39;&#39;&#39;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">producer</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;font-style:italic;">name</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;font-style:italic;">food</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;font-style:italic;">q</span><span style="color:#ABB2BF;">):</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;font-style:italic;">for</span><span style="color:#ABB2BF;"> i </span><span style="color:#C678DD;font-style:italic;">in</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">range</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">8</span><span style="color:#ABB2BF;">):</span></span>
<span class="line"><span style="color:#ABB2BF;">        time.</span><span style="color:#61AFEF;">sleep</span><span style="color:#ABB2BF;">(random.</span><span style="color:#61AFEF;">randint</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">f</span><span style="color:#98C379;">&#39;</span><span style="color:#D19A66;">{</span><span style="color:#ABB2BF;">name</span><span style="color:#D19A66;">}</span><span style="color:#98C379;">生产了</span><span style="color:#D19A66;">{</span><span style="color:#ABB2BF;">food</span><span style="color:#D19A66;">}{</span><span style="color:#ABB2BF;">i</span><span style="color:#D19A66;">}</span><span style="color:#98C379;">&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">        q.</span><span style="color:#61AFEF;">put</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">f</span><span style="color:#98C379;">&#39;</span><span style="color:#D19A66;">{</span><span style="color:#ABB2BF;">food</span><span style="color:#D19A66;">}{</span><span style="color:#ABB2BF;">i</span><span style="color:#D19A66;">}</span><span style="color:#98C379;">&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">consumer</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;font-style:italic;">name</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;font-style:italic;">q</span><span style="color:#ABB2BF;">):</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;font-style:italic;">while</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">True</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;">        food </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> q.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">        time.</span><span style="color:#61AFEF;">sleep</span><span style="color:#ABB2BF;">(random.</span><span style="color:#61AFEF;">randint</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">f</span><span style="color:#98C379;">&#39;</span><span style="color:#D19A66;">{</span><span style="color:#ABB2BF;">name</span><span style="color:#D19A66;">}</span><span style="color:#98C379;">吃了</span><span style="color:#D19A66;">{</span><span style="color:#ABB2BF;">food</span><span style="color:#D19A66;">}</span><span style="color:#98C379;">&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#7F848E;font-style:italic;"># if food == &#39;鹤顶红&#39;:</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#7F848E;font-style:italic;">#     break</span></span>
<span class="line"><span style="color:#ABB2BF;">        q.</span><span style="color:#61AFEF;">task_done</span><span style="color:#ABB2BF;">()   </span><span style="color:#7F848E;font-style:italic;"># 告诉队列，已经拿走了一个数据，并且已经处理完了</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;font-style:italic;">if</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">__name__</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">==</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;__main__&#39;</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;">    q </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">JoinableQueue</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">    p1 </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Process</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">target</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">producer, </span><span style="color:#E06C75;font-style:italic;">args</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;中华小当家&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;黄金炒饭&#39;</span><span style="color:#ABB2BF;">, q))</span></span>
<span class="line"><span style="color:#ABB2BF;">    p2 </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Process</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">target</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">producer, </span><span style="color:#E06C75;font-style:italic;">args</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;神厨小福贵&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;佛跳墙&#39;</span><span style="color:#ABB2BF;">, q))</span></span>
<span class="line"><span style="color:#ABB2BF;">    c1 </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Process</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">target</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">consumer, </span><span style="color:#E06C75;font-style:italic;">args</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;八戒&#39;</span><span style="color:#ABB2BF;">, q))</span></span>
<span class="line"><span style="color:#ABB2BF;">    c2 </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Process</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">target</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">consumer, </span><span style="color:#E06C75;font-style:italic;">args</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;悟空&#39;</span><span style="color:#ABB2BF;">, q))</span></span>
<span class="line"><span style="color:#ABB2BF;">    p1.</span><span style="color:#61AFEF;">start</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">    p2.</span><span style="color:#61AFEF;">start</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    c1.daemon </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">True</span></span>
<span class="line"><span style="color:#ABB2BF;">    c2.daemon </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">True</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    c1.</span><span style="color:#61AFEF;">start</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">    c2.</span><span style="color:#61AFEF;">start</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    p1.</span><span style="color:#61AFEF;">join</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">    p2.</span><span style="color:#61AFEF;">join</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;"># q.put(&#39;鹤顶红&#39;)</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;"># q.put(&#39;鹤顶红&#39;)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    q.</span><span style="color:#61AFEF;">join</span><span style="color:#ABB2BF;">()    </span><span style="color:#7F848E;font-style:italic;"># 等待队列中所有的数据被取完，计数器变成0</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;"># 主进程死了，消费者也要跟着陪葬，守护进程</span></span></code></pre></div><h2 id="线程" tabindex="-1">线程 <a class="header-anchor" href="#线程" aria-label="Permalink to &quot;线程&quot;">​</a></h2><p>进程：资源单位</p><p>线程：执行单位</p><p>创建进程</p><ul><li>申请内存空间 消耗资源</li><li>拷贝代码 消耗资源</li></ul><p>创建线程：在一个进程内可以创建多个线程，同一个进程内，多个线程之间的资源是共享的</p><ul><li>不需要再次申请内存空间</li><li>不需要拷贝代码</li></ul><p>开发一个自动保存的编辑器</p><ul><li>获取键盘输入</li><li>把输入的内容实时显示到屏幕</li><li>自动保存到硬盘</li></ul><h2 id="创建线程" tabindex="-1">创建线程 <a class="header-anchor" href="#创建线程" aria-label="Permalink to &quot;创建线程&quot;">​</a></h2><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># 方式一</span></span>
<span class="line"><span style="color:#C678DD;font-style:italic;">from</span><span style="color:#ABB2BF;"> threading </span><span style="color:#C678DD;font-style:italic;">import</span><span style="color:#ABB2BF;"> Thread</span></span>
<span class="line"><span style="color:#C678DD;font-style:italic;">import</span><span style="color:#ABB2BF;"> time</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">task</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;font-style:italic;">name</span><span style="color:#ABB2BF;">):</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">f</span><span style="color:#98C379;">&#39;</span><span style="color:#D19A66;">{</span><span style="color:#ABB2BF;">name</span><span style="color:#D19A66;">}</span><span style="color:#98C379;"> 任务开始&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    time.</span><span style="color:#61AFEF;">sleep</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">f</span><span style="color:#98C379;">&#39;</span><span style="color:#D19A66;">{</span><span style="color:#ABB2BF;">name</span><span style="color:#D19A66;">}</span><span style="color:#98C379;"> 任务结束&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;font-style:italic;">if</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">__name__</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">==</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;__main__&#39;</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;">    t </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Thread</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">target</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">task, </span><span style="color:#E06C75;font-style:italic;">args</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;悟空&#39;</span><span style="color:#ABB2BF;">,))</span></span>
<span class="line"><span style="color:#ABB2BF;">    t.</span><span style="color:#61AFEF;">start</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;主线程&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 方式二</span></span>
<span class="line"><span style="color:#C678DD;font-style:italic;">from</span><span style="color:#ABB2BF;"> threading </span><span style="color:#C678DD;font-style:italic;">import</span><span style="color:#ABB2BF;"> Thread</span></span>
<span class="line"><span style="color:#C678DD;font-style:italic;">import</span><span style="color:#ABB2BF;"> time</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">MyThread</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Thread</span><span style="color:#ABB2BF;">):</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">__init__</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;font-style:italic;">self</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;font-style:italic;">name</span><span style="color:#ABB2BF;">):</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#56B6C2;">super</span><span style="color:#ABB2BF;">().</span><span style="color:#56B6C2;">__init__</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;">.name </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> name</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">run</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;font-style:italic;">self</span><span style="color:#ABB2BF;">):</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">f</span><span style="color:#98C379;">&#39;</span><span style="color:#D19A66;">{</span><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;">.name</span><span style="color:#D19A66;">}</span><span style="color:#98C379;"> 任务开始&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">        time.</span><span style="color:#61AFEF;">sleep</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">f</span><span style="color:#98C379;">&#39;</span><span style="color:#D19A66;">{</span><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;">.name</span><span style="color:#D19A66;">}</span><span style="color:#98C379;"> 任务结束&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;font-style:italic;">if</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">__name__</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">==</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;__main__&#39;</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;">    t </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">MyThread</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;悟空&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    t.</span><span style="color:#61AFEF;">start</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;主线程&#39;</span><span style="color:#ABB2BF;">)</span></span></code></pre></div><h2 id="tcp并发效果" tabindex="-1">TCP并发效果 <a class="header-anchor" href="#tcp并发效果" aria-label="Permalink to &quot;TCP并发效果&quot;">​</a></h2><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># 服务端</span></span>
<span class="line"><span style="color:#C678DD;font-style:italic;">import</span><span style="color:#ABB2BF;"> socket</span></span>
<span class="line"><span style="color:#C678DD;font-style:italic;">from</span><span style="color:#ABB2BF;"> multiprocessing </span><span style="color:#C678DD;font-style:italic;">import</span><span style="color:#ABB2BF;"> Process</span></span>
<span class="line"><span style="color:#C678DD;font-style:italic;">from</span><span style="color:#ABB2BF;"> threading </span><span style="color:#C678DD;font-style:italic;">import</span><span style="color:#ABB2BF;"> Thread</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">s </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> socket.</span><span style="color:#61AFEF;">socket</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">s.</span><span style="color:#61AFEF;">bind</span><span style="color:#ABB2BF;">((</span><span style="color:#98C379;">&#39;127.0.0.1&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">8002</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#ABB2BF;">s.</span><span style="color:#61AFEF;">listen</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">task</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;font-style:italic;">conn</span><span style="color:#ABB2BF;">):</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;"># 通信循环</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;font-style:italic;">while</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">True</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;font-style:italic;">try</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;">            data </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> conn.</span><span style="color:#61AFEF;">recv</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1024</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;font-style:italic;">except</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#C678DD;font-style:italic;">break</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;font-style:italic;">if</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;font-style:italic;">not</span><span style="color:#ABB2BF;"> data:</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#C678DD;font-style:italic;">break</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(data.</span><span style="color:#61AFEF;">decode</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;utf-8&#39;</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#ABB2BF;">        conn.</span><span style="color:#61AFEF;">send</span><span style="color:#ABB2BF;">(data.</span><span style="color:#61AFEF;">upper</span><span style="color:#ABB2BF;">())</span></span>
<span class="line"><span style="color:#ABB2BF;">    conn.</span><span style="color:#61AFEF;">close</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;font-style:italic;">if</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">__name__</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">==</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;__main__&#39;</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;font-style:italic;">while</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">True</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;">        conn, addr </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> s.</span><span style="color:#61AFEF;">accept</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#7F848E;font-style:italic;"># p = Process(target=task, args=(conn,))</span></span>
<span class="line"><span style="color:#ABB2BF;">        p </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Thread</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">target</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">task, </span><span style="color:#E06C75;font-style:italic;">args</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">(conn,))</span></span>
<span class="line"><span style="color:#ABB2BF;">        p.</span><span style="color:#61AFEF;">start</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 客户端</span></span>
<span class="line"><span style="color:#C678DD;font-style:italic;">import</span><span style="color:#ABB2BF;"> socket</span></span>
<span class="line"><span style="color:#C678DD;font-style:italic;">import</span><span style="color:#ABB2BF;"> time</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">c </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> socket.</span><span style="color:#61AFEF;">socket</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">c.</span><span style="color:#61AFEF;">connect</span><span style="color:#ABB2BF;">((</span><span style="color:#98C379;">&#39;127.0.0.1&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">8002</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#C678DD;font-style:italic;">while</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">True</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;">    c.</span><span style="color:#61AFEF;">send</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">b</span><span style="color:#98C379;">&#39;hello&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    data </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> c.</span><span style="color:#61AFEF;">recv</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1024</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(data.</span><span style="color:#61AFEF;">decode</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;utf-8&#39;</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#ABB2BF;">    time.</span><span style="color:#61AFEF;">sleep</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">)</span></span></code></pre></div><h2 id="join方法-1" tabindex="-1">join方法 <a class="header-anchor" href="#join方法-1" aria-label="Permalink to &quot;join方法&quot;">​</a></h2><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;font-style:italic;">from</span><span style="color:#ABB2BF;"> threading </span><span style="color:#C678DD;font-style:italic;">import</span><span style="color:#ABB2BF;"> Thread</span></span>
<span class="line"><span style="color:#C678DD;font-style:italic;">import</span><span style="color:#ABB2BF;"> time</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">task</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;font-style:italic;">name</span><span style="color:#ABB2BF;">):</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">f</span><span style="color:#98C379;">&#39;</span><span style="color:#D19A66;">{</span><span style="color:#ABB2BF;">name</span><span style="color:#D19A66;">}</span><span style="color:#98C379;"> 任务开始&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    time.</span><span style="color:#61AFEF;">sleep</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">f</span><span style="color:#98C379;">&#39;</span><span style="color:#D19A66;">{</span><span style="color:#ABB2BF;">name</span><span style="color:#D19A66;">}</span><span style="color:#98C379;"> 任务结束&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;font-style:italic;">if</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">__name__</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">==</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;__main__&#39;</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;">    t </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Thread</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">target</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">task, </span><span style="color:#E06C75;font-style:italic;">args</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;悟空&#39;</span><span style="color:#ABB2BF;">,))</span></span>
<span class="line"><span style="color:#ABB2BF;">    t.</span><span style="color:#61AFEF;">start</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">    t.</span><span style="color:#61AFEF;">join</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;主线程&#39;</span><span style="color:#ABB2BF;">)</span></span></code></pre></div><h2 id="进程间数据共享" tabindex="-1">进程间数据共享 <a class="header-anchor" href="#进程间数据共享" aria-label="Permalink to &quot;进程间数据共享&quot;">​</a></h2><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;font-style:italic;">from</span><span style="color:#ABB2BF;"> threading </span><span style="color:#C678DD;font-style:italic;">import</span><span style="color:#ABB2BF;"> Thread</span></span>
<span class="line"><span style="color:#C678DD;font-style:italic;">import</span><span style="color:#ABB2BF;"> os</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">age </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">18</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">task</span><span style="color:#ABB2BF;">():</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;"># print(&#39;子线程&#39;, os.getpid())</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">global</span><span style="color:#ABB2BF;"> age</span></span>
<span class="line"><span style="color:#ABB2BF;">    age </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">16</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;font-style:italic;">if</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">__name__</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">==</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;__main__&#39;</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;">    t </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Thread</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">target</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">task)</span></span>
<span class="line"><span style="color:#ABB2BF;">    t.</span><span style="color:#61AFEF;">start</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;"># print(&#39;主线程&#39;, os.getpid())</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(age)</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;当前线程的名字&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#61AFEF;">current_thread</span><span style="color:#ABB2BF;">().name)</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;进程中活跃的线程数量&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#61AFEF;">active_count</span><span style="color:#ABB2BF;">())</span></span></code></pre></div><h2 id="守护线程" tabindex="-1">守护线程 <a class="header-anchor" href="#守护线程" aria-label="Permalink to &quot;守护线程&quot;">​</a></h2><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#98C379;">&#39;&#39;&#39;</span></span>
<span class="line"><span style="color:#98C379;">主线程运行完毕之后，它不会立刻结束，要等待所有子线程运行完毕之后才会结束；</span></span>
<span class="line"><span style="color:#98C379;">因为主线程结束，就意味着主线程所在的进程结束了</span></span>
<span class="line"><span style="color:#98C379;">&#39;&#39;&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;font-style:italic;">from</span><span style="color:#ABB2BF;"> threading </span><span style="color:#C678DD;font-style:italic;">import</span><span style="color:#ABB2BF;"> Thread</span></span>
<span class="line"><span style="color:#C678DD;font-style:italic;">import</span><span style="color:#ABB2BF;"> time</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">task</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;font-style:italic;">name</span><span style="color:#ABB2BF;">):</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">f</span><span style="color:#98C379;">&#39;</span><span style="color:#D19A66;">{</span><span style="color:#ABB2BF;">name</span><span style="color:#D19A66;">}</span><span style="color:#98C379;"> 还活着&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    time.</span><span style="color:#61AFEF;">sleep</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">f</span><span style="color:#98C379;">&#39;</span><span style="color:#D19A66;">{</span><span style="color:#ABB2BF;">name</span><span style="color:#D19A66;">}</span><span style="color:#98C379;"> 正常死亡&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;font-style:italic;">if</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">__name__</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">==</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;__main__&#39;</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;">    t </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Thread</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">target</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">task, </span><span style="color:#E06C75;font-style:italic;">args</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;妲己&#39;</span><span style="color:#ABB2BF;">,))</span></span>
<span class="line"><span style="color:#ABB2BF;">    t.daemon </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">True</span></span>
<span class="line"><span style="color:#ABB2BF;">    t.</span><span style="color:#61AFEF;">start</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;纣王驾崩了&#39;</span><span style="color:#ABB2BF;">)</span></span></code></pre></div><p>例子</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># 例子：</span></span>
<span class="line"><span style="color:#C678DD;font-style:italic;">from</span><span style="color:#ABB2BF;"> threading </span><span style="color:#C678DD;font-style:italic;">import</span><span style="color:#ABB2BF;"> Thread</span></span>
<span class="line"><span style="color:#C678DD;font-style:italic;">import</span><span style="color:#ABB2BF;"> time</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">f1</span><span style="color:#ABB2BF;">():</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;任务1开始&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    time.</span><span style="color:#61AFEF;">sleep</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;任务1结束&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">f2</span><span style="color:#ABB2BF;">():</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;任务2开始&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    time.</span><span style="color:#61AFEF;">sleep</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;任务2结束&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;font-style:italic;">if</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">__name__</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">==</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;__main__&#39;</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;">    t1 </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Thread</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">target</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">f1)</span></span>
<span class="line"><span style="color:#ABB2BF;">    t2 </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Thread</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">target</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">f2)</span></span>
<span class="line"><span style="color:#ABB2BF;">    t1.daemon </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">True</span></span>
<span class="line"><span style="color:#ABB2BF;">    t1.</span><span style="color:#61AFEF;">start</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">    t2.</span><span style="color:#61AFEF;">start</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;主线程&#39;</span><span style="color:#ABB2BF;">)</span></span></code></pre></div><h2 id="gil全局解释器锁" tabindex="-1">GIL全局解释器锁 <a class="header-anchor" href="#gil全局解释器锁" aria-label="Permalink to &quot;GIL全局解释器锁&quot;">​</a></h2><p><a href="https://wiki.python.org/moin/GlobalInterpreterLock" target="_blank" rel="noreferrer">https://wiki.python.org/moin/GlobalInterpreterLock</a></p><p>In CPython, the <strong>global interpreter lock</strong>, or <strong>GIL</strong>, is a mutex that protects access to Python objects, preventing multiple threads from executing Python bytecodes at once. The GIL prevents race conditions and ensures thread safety. A nice explanation of <a href="https://python.land/python-concurrency/the-python-gil" target="_blank" rel="noreferrer">how the Python GIL helps in these areas can be found here</a>. In short, this mutex is necessary mainly because CPython&#39;s memory management is not thread-safe.</p><p>在Cpython解释器中，GIL是一把互斥锁，用来阻止同一个进程下的多个线程同时执行，也就是说在同一个进程下的多个线程，它们没办法并行，有多个cpu都不能并行，一次只有一个cpu来执行</p><p><s>问题：python的多线程好像没什么卵用？无法利用多核优势，即便有多个核，一次也只能用一个</s></p><p>分情况</p><ul><li>单核 <ul><li>10个任务（计算密集型/IO密集型）</li></ul></li><li>多核 <ul><li>10个任务（计算密集型/IO密集型）</li></ul></li></ul><p>多核(cpu10个核)</p><ul><li>计算密集型 每一个任务都需要10s， <ul><li>多线程 100+</li><li>多进程 10+ <strong>效率高</strong></li></ul></li><li>IO密集型 <ul><li>多线程 <strong>节省资源</strong></li><li>多进程 浪费资源</li></ul></li></ul><p>CPython的内存管理不是线程安全的</p><p>内存管理(垃圾回收机制)</p><ul><li>引用计数</li><li>标记清除</li><li>分代回收</li></ul><p>GC巡逻</p><p>python解释器版本</p><ul><li><strong>Cpython</strong></li><li>Jpython</li><li>Pypypython</li></ul><p>注意：</p><ul><li>GIL不是python的特点，而是Cpython解释器独有的特点</li><li>GIL会导致同一个进程下的多个线程不能同时执行，无法利用多核能力</li><li>GIL保证的是解释器级别的数据的安全</li><li>我们写代码的时候，该怎么写就怎么写，不用考虑GIL</li></ul><p>总结：</p><ul><li>多进程和多线程都有各自的优势，以后写项目的时候，通常可以多进程下开设多线程</li><li>我们现在开发的程序，90%以上，其实都是IO密集型的，多线程优势更大</li><li>多进程使用场景（挖矿、造氢弹原子弹、训练人工智能、解决三体问题），利用cpu的多核能力</li></ul><h2 id="死锁" tabindex="-1">死锁 <a class="header-anchor" href="#死锁" aria-label="Permalink to &quot;死锁&quot;">​</a></h2><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;font-style:italic;">from</span><span style="color:#ABB2BF;"> threading </span><span style="color:#C678DD;font-style:italic;">import</span><span style="color:#ABB2BF;"> Thread, Lock, current_thread</span></span>
<span class="line"><span style="color:#C678DD;font-style:italic;">import</span><span style="color:#ABB2BF;"> time</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">mutex1 </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Lock</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">mutex2 </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Lock</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">task</span><span style="color:#ABB2BF;">():</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    mutex1.</span><span style="color:#61AFEF;">acquire</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">current_thread</span><span style="color:#ABB2BF;">().name, </span><span style="color:#98C379;">&#39;抢到锁1&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    mutex2.</span><span style="color:#61AFEF;">acquire</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">current_thread</span><span style="color:#ABB2BF;">().name, </span><span style="color:#98C379;">&#39;抢到锁2&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    mutex2.</span><span style="color:#61AFEF;">release</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">    mutex1.</span><span style="color:#61AFEF;">release</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">task2</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">task2</span><span style="color:#ABB2BF;">():</span></span>
<span class="line"><span style="color:#ABB2BF;">    mutex2.</span><span style="color:#61AFEF;">acquire</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">current_thread</span><span style="color:#ABB2BF;">().name, </span><span style="color:#98C379;">&#39;抢到锁2&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    time.</span><span style="color:#61AFEF;">sleep</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    mutex1.</span><span style="color:#61AFEF;">acquire</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">current_thread</span><span style="color:#ABB2BF;">().name, </span><span style="color:#98C379;">&#39;抢到锁1&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    mutex1.</span><span style="color:#61AFEF;">release</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">    mutex2.</span><span style="color:#61AFEF;">release</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;font-style:italic;">if</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">__name__</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">==</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;__main__&#39;</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;font-style:italic;">for</span><span style="color:#ABB2BF;"> i </span><span style="color:#C678DD;font-style:italic;">in</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">range</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">8</span><span style="color:#ABB2BF;">):</span></span>
<span class="line"><span style="color:#ABB2BF;">        t </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Thread</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">target</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">task)</span></span>
<span class="line"><span style="color:#ABB2BF;">        t.</span><span style="color:#61AFEF;">start</span><span style="color:#ABB2BF;">()</span></span></code></pre></div><h2 id="递归锁" tabindex="-1">递归锁 <a class="header-anchor" href="#递归锁" aria-label="Permalink to &quot;递归锁&quot;">​</a></h2><p>内部有一个计数器，每acquire一次计数器就会+1，每release一次计数器就会-1，只要计数器不为0，其他人就不能抢到这把锁</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;font-style:italic;">from</span><span style="color:#ABB2BF;"> threading </span><span style="color:#C678DD;font-style:italic;">import</span><span style="color:#ABB2BF;"> Thread, Lock, current_thread, RLock</span></span>
<span class="line"><span style="color:#C678DD;font-style:italic;">import</span><span style="color:#ABB2BF;"> time</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># mutex1 = RLock()</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># mutex2 = mutex1</span></span>
<span class="line"><span style="color:#ABB2BF;">mutex2 </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> mutex1 </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">RLock</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">task</span><span style="color:#ABB2BF;">():</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    mutex1.</span><span style="color:#61AFEF;">acquire</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">current_thread</span><span style="color:#ABB2BF;">().name, </span><span style="color:#98C379;">&#39;抢到锁1&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    mutex2.</span><span style="color:#61AFEF;">acquire</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">current_thread</span><span style="color:#ABB2BF;">().name, </span><span style="color:#98C379;">&#39;抢到锁2&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    mutex2.</span><span style="color:#61AFEF;">release</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">    mutex1.</span><span style="color:#61AFEF;">release</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">task2</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">task2</span><span style="color:#ABB2BF;">():</span></span>
<span class="line"><span style="color:#ABB2BF;">    mutex2.</span><span style="color:#61AFEF;">acquire</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">current_thread</span><span style="color:#ABB2BF;">().name, </span><span style="color:#98C379;">&#39;抢到锁2&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    time.</span><span style="color:#61AFEF;">sleep</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    mutex1.</span><span style="color:#61AFEF;">acquire</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">current_thread</span><span style="color:#ABB2BF;">().name, </span><span style="color:#98C379;">&#39;抢到锁1&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    mutex1.</span><span style="color:#61AFEF;">release</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">    mutex2.</span><span style="color:#61AFEF;">release</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;font-style:italic;">if</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">__name__</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">==</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;__main__&#39;</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;font-style:italic;">for</span><span style="color:#ABB2BF;"> i </span><span style="color:#C678DD;font-style:italic;">in</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">range</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">8</span><span style="color:#ABB2BF;">):</span></span>
<span class="line"><span style="color:#ABB2BF;">        t </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Thread</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">target</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">task)</span></span>
<span class="line"><span style="color:#ABB2BF;">        t.</span><span style="color:#61AFEF;">start</span><span style="color:#ABB2BF;">()</span></span></code></pre></div><h2 id="信号量" tabindex="-1">信号量 <a class="header-anchor" href="#信号量" aria-label="Permalink to &quot;信号量&quot;">​</a></h2><p>信号量在不同的阶段，可能会对应不同的技术点，对于并发编程来说，它指的是”锁“</p><p>他可以用来控制同时访问特定资源的线程数量，通常用于某些资源有明确访问数量限制的场景，简单说就是用于<strong>限流</strong></p><p>例子：停车场</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#98C379;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#98C379;">互斥锁：停车场只有一个车位</span></span>
<span class="line"><span style="color:#98C379;">信号量：停车场可以有多个车位</span></span>
<span class="line"><span style="color:#98C379;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># coding: utf-8</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># @Author: 小飞有点东西</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 资料下载：https://active.clewm.net/FrcyFA</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;font-style:italic;">from</span><span style="color:#ABB2BF;"> threading </span><span style="color:#C678DD;font-style:italic;">import</span><span style="color:#ABB2BF;"> Thread, Semaphore</span></span>
<span class="line"><span style="color:#C678DD;font-style:italic;">import</span><span style="color:#ABB2BF;"> time</span></span>
<span class="line"><span style="color:#C678DD;font-style:italic;">import</span><span style="color:#ABB2BF;"> random</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">sp </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Semaphore</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">task</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;font-style:italic;">name</span><span style="color:#ABB2BF;">):</span></span>
<span class="line"><span style="color:#ABB2BF;">    sp.</span><span style="color:#61AFEF;">acquire</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(name, </span><span style="color:#98C379;">&#39;抢到车位&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    time.</span><span style="color:#61AFEF;">sleep</span><span style="color:#ABB2BF;">(random.</span><span style="color:#61AFEF;">randint</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#ABB2BF;">    sp.</span><span style="color:#61AFEF;">release</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;font-style:italic;">if</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">__name__</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">==</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;__main__&#39;</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;font-style:italic;">for</span><span style="color:#ABB2BF;"> i </span><span style="color:#C678DD;font-style:italic;">in</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">range</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">25</span><span style="color:#ABB2BF;">):</span></span>
<span class="line"><span style="color:#ABB2BF;">        t </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Thread</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">target</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">task, </span><span style="color:#E06C75;font-style:italic;">args</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">f</span><span style="color:#98C379;">&#39;宝马</span><span style="color:#D19A66;">{</span><span style="color:#ABB2BF;">i</span><span style="color:#56B6C2;">+</span><span style="color:#D19A66;">1}</span><span style="color:#98C379;">号&#39;</span><span style="color:#ABB2BF;">,))</span></span>
<span class="line"><span style="color:#ABB2BF;">        t.</span><span style="color:#61AFEF;">start</span><span style="color:#ABB2BF;">()</span></span></code></pre></div><h2 id="event事件" tabindex="-1">Event事件 <a class="header-anchor" href="#event事件" aria-label="Permalink to &quot;Event事件&quot;">​</a></h2><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># coding: utf-8</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># @Author: 小飞有点东西</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 资料下载：https://active.clewm.net/FrcyFA</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;font-style:italic;">from</span><span style="color:#ABB2BF;"> threading </span><span style="color:#C678DD;font-style:italic;">import</span><span style="color:#ABB2BF;"> Thread, Event</span></span>
<span class="line"><span style="color:#C678DD;font-style:italic;">import</span><span style="color:#ABB2BF;"> time</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">event </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Event</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">bus</span><span style="color:#ABB2BF;">():</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;公交车即将到站&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    time.</span><span style="color:#61AFEF;">sleep</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;公交车到站了&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;"># 告诉等车的人可以上车了</span></span>
<span class="line"><span style="color:#ABB2BF;">    event.</span><span style="color:#61AFEF;">set</span><span style="color:#ABB2BF;">()  </span><span style="color:#7F848E;font-style:italic;"># 发射信号，车来了赶紧上车</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">passenger</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;font-style:italic;">name</span><span style="color:#ABB2BF;">):</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(name, </span><span style="color:#98C379;">&#39;正在等车&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    event.</span><span style="color:#61AFEF;">wait</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(name, </span><span style="color:#98C379;">&#39;上车出发&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;font-style:italic;">if</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">__name__</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">==</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;__main__&#39;</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;">    t </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Thread</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">target</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">bus)</span></span>
<span class="line"><span style="color:#ABB2BF;">    t.</span><span style="color:#61AFEF;">start</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;font-style:italic;">for</span><span style="color:#ABB2BF;"> i </span><span style="color:#C678DD;font-style:italic;">in</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">range</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">):</span></span>
<span class="line"><span style="color:#ABB2BF;">        t </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Thread</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">target</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">passenger, </span><span style="color:#E06C75;font-style:italic;">args</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">f</span><span style="color:#98C379;">&#39;乘客</span><span style="color:#D19A66;">{</span><span style="color:#ABB2BF;">i</span><span style="color:#D19A66;">}</span><span style="color:#98C379;">&#39;</span><span style="color:#ABB2BF;">,))</span></span>
<span class="line"><span style="color:#ABB2BF;">        t.</span><span style="color:#61AFEF;">start</span><span style="color:#ABB2BF;">()</span></span></code></pre></div><h2 id="池" tabindex="-1">池 <a class="header-anchor" href="#池" aria-label="Permalink to &quot;池&quot;">​</a></h2><p>池是用来保证计算机硬件安全的情况下，最大限度的利用计算机资源，降低了程序运行效率，但是保证了计算机硬件的安全</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># 信号量：锁，线程自己创建，控制线程执行，阻塞</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 线程池：线程由线程池创建，控制线程数量</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;font-style:italic;">from</span><span style="color:#ABB2BF;"> concurrent.futures </span><span style="color:#C678DD;font-style:italic;">import</span><span style="color:#ABB2BF;"> ThreadPoolExecutor, ProcessPoolExecutor</span></span>
<span class="line"><span style="color:#C678DD;font-style:italic;">import</span><span style="color:#ABB2BF;"> time</span></span>
<span class="line"><span style="color:#C678DD;font-style:italic;">import</span><span style="color:#ABB2BF;"> os</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># pool = ThreadPoolExecutor(10)  # 不传参的话，默认开设的线程数量，是当前cpu的个数乘以5</span></span>
<span class="line"><span style="color:#ABB2BF;">pool </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">ProcessPoolExecutor</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">)  </span><span style="color:#7F848E;font-style:italic;"># 不传参的话，默认开设的进程数量，是当前cpu的个数</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">task</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;font-style:italic;">name</span><span style="color:#ABB2BF;">):</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(name, os.</span><span style="color:#61AFEF;">getpid</span><span style="color:#ABB2BF;">())</span></span>
<span class="line"><span style="color:#ABB2BF;">    time.</span><span style="color:#61AFEF;">sleep</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;font-style:italic;">return</span><span style="color:#ABB2BF;"> name </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">10</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">future </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> pool.</span><span style="color:#61AFEF;">submit</span><span style="color:#ABB2BF;">(task, i)</span></span></code></pre></div><h2 id="异步回调机制" tabindex="-1">异步回调机制 <a class="header-anchor" href="#异步回调机制" aria-label="Permalink to &quot;异步回调机制&quot;">​</a></h2><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;font-style:italic;">from</span><span style="color:#ABB2BF;"> concurrent.futures </span><span style="color:#C678DD;font-style:italic;">import</span><span style="color:#ABB2BF;"> ThreadPoolExecutor, ProcessPoolExecutor</span></span>
<span class="line"><span style="color:#C678DD;font-style:italic;">import</span><span style="color:#ABB2BF;"> time</span></span>
<span class="line"><span style="color:#C678DD;font-style:italic;">import</span><span style="color:#ABB2BF;"> os</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># pool = ThreadPoolExecutor(10)  # 不传参的话，默认开设的线程数量，是当前cpu的个数乘以5</span></span>
<span class="line"><span style="color:#ABB2BF;">pool </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">ProcessPoolExecutor</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">)  </span><span style="color:#7F848E;font-style:italic;"># 不传参的话，默认开设的进程数量，是当前cpu的个数</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">task</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;font-style:italic;">name</span><span style="color:#ABB2BF;">):</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(name, os.</span><span style="color:#61AFEF;">getpid</span><span style="color:#ABB2BF;">())</span></span>
<span class="line"><span style="color:#ABB2BF;">    time.</span><span style="color:#61AFEF;">sleep</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;font-style:italic;">return</span><span style="color:#ABB2BF;"> name </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">10</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span></span>
<span class="line"><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">call_back</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;font-style:italic;">res</span><span style="color:#ABB2BF;">):</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;call_back&#39;</span><span style="color:#ABB2BF;">, res.</span><span style="color:#61AFEF;">result</span><span style="color:#ABB2BF;">())</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">pool.</span><span style="color:#61AFEF;">submit</span><span style="color:#ABB2BF;">(task, i).</span><span style="color:#61AFEF;">add_done_callback</span><span style="color:#ABB2BF;">(call_back)</span></span></code></pre></div><h2 id="协程" tabindex="-1">协程 <a class="header-anchor" href="#协程" aria-label="Permalink to &quot;协程&quot;">​</a></h2><p>也可以称为微线程，它是一种用户态内的上下文切换技术，简单说就是在单线程下实现并发的效果</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#98C379;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#98C379;">进程：资源单位</span></span>
<span class="line"><span style="color:#98C379;">线程：执行单位</span></span>
<span class="line"><span style="color:#98C379;">协程：程序员人为创造出来的，不存在（切换+保存状态）</span></span>
<span class="line"></span>
<span class="line"><span style="color:#98C379;">当程序遇到IO的时候，通过我们写的代码，让我们的代码自动完成切换</span></span>
<span class="line"><span style="color:#98C379;">也就是我们通过代码来监听IO，一旦程序遇到IO，就在代码层面上自动切换，给cpu的感觉就是我们的程序没有IO，换句话说就是，我们欺骗了cpu</span></span>
<span class="line"><span style="color:#98C379;">&quot;&quot;&quot;</span></span></code></pre></div><p>注意：切换不一定是提升效率，还有可能降低效率</p><p>​ 遇到IO切，就会提升效率；</p><p>​ 对于计算密集型任务来说，切换反而会降低效率；</p><ul><li>yield</li><li>gevent</li></ul><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#ABB2BF;">pip3 install gevent</span></span></code></pre></div><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;font-style:italic;">from</span><span style="color:#ABB2BF;"> gevent </span><span style="color:#C678DD;font-style:italic;">import</span><span style="color:#ABB2BF;"> monkey</span></span>
<span class="line"><span style="color:#ABB2BF;">monkey.</span><span style="color:#61AFEF;">patch_all</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#C678DD;font-style:italic;">from</span><span style="color:#ABB2BF;"> gevent </span><span style="color:#C678DD;font-style:italic;">import</span><span style="color:#ABB2BF;"> spawn</span></span>
<span class="line"><span style="color:#C678DD;font-style:italic;">import</span><span style="color:#ABB2BF;"> time</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">da</span><span style="color:#ABB2BF;">():</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;font-style:italic;">for</span><span style="color:#ABB2BF;"> _ </span><span style="color:#C678DD;font-style:italic;">in</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">range</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">):</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;哒&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">        time.</span><span style="color:#61AFEF;">sleep</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">mie</span><span style="color:#ABB2BF;">():</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;font-style:italic;">for</span><span style="color:#ABB2BF;"> _ </span><span style="color:#C678DD;font-style:italic;">in</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">range</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">):</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;咩&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">        time.</span><span style="color:#61AFEF;">sleep</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">buyao</span><span style="color:#ABB2BF;">():</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;font-style:italic;">for</span><span style="color:#ABB2BF;"> _ </span><span style="color:#C678DD;font-style:italic;">in</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">range</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">):</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;不要&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">        time.</span><span style="color:#61AFEF;">sleep</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">start </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> time.</span><span style="color:#61AFEF;">time</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">g1 </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">spawn</span><span style="color:#ABB2BF;">(da)</span></span>
<span class="line"><span style="color:#ABB2BF;">g2 </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">spawn</span><span style="color:#ABB2BF;">(mie)</span></span>
<span class="line"><span style="color:#ABB2BF;">g3 </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">spawn</span><span style="color:#ABB2BF;">(buyao)</span></span>
<span class="line"><span style="color:#ABB2BF;">g1.</span><span style="color:#61AFEF;">join</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">g2.</span><span style="color:#61AFEF;">join</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">g3.</span><span style="color:#61AFEF;">join</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">end </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> time.</span><span style="color:#61AFEF;">time</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># print(end - start)  # 12.029063940048218</span></span>
<span class="line"><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(end </span><span style="color:#56B6C2;">-</span><span style="color:#ABB2BF;"> start)  </span><span style="color:#7F848E;font-style:italic;"># 6.019258975982666</span></span>
<span class="line"><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(end </span><span style="color:#56B6C2;">-</span><span style="color:#ABB2BF;"> start)  </span><span style="color:#7F848E;font-style:italic;"># 9.015071868896484</span></span></code></pre></div><p>协程实现tcp并发：</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># coding: utf-8</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># @Author: 小飞有点东西</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 资料下载：https://active.clewm.net/FrcyFA</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># server</span></span>
<span class="line"><span style="color:#C678DD;font-style:italic;">from</span><span style="color:#ABB2BF;"> gevent </span><span style="color:#C678DD;font-style:italic;">import</span><span style="color:#ABB2BF;"> monkey;monkey.</span><span style="color:#61AFEF;">patch_all</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#C678DD;font-style:italic;">import</span><span style="color:#ABB2BF;"> socket</span></span>
<span class="line"><span style="color:#C678DD;font-style:italic;">from</span><span style="color:#ABB2BF;"> gevent </span><span style="color:#C678DD;font-style:italic;">import</span><span style="color:#ABB2BF;"> spawn</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">comm</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;font-style:italic;">conn</span><span style="color:#ABB2BF;">):</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;font-style:italic;">while</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">True</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;font-style:italic;">try</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;">            data </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> conn.</span><span style="color:#61AFEF;">recv</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1024</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#C678DD;font-style:italic;">if</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;font-style:italic;">not</span><span style="color:#ABB2BF;"> data:</span></span>
<span class="line"><span style="color:#ABB2BF;">                </span><span style="color:#C678DD;font-style:italic;">break</span></span>
<span class="line"><span style="color:#ABB2BF;">            conn.</span><span style="color:#61AFEF;">send</span><span style="color:#ABB2BF;">(data.</span><span style="color:#61AFEF;">upper</span><span style="color:#ABB2BF;">())</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;font-style:italic;">except</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#C678DD;font-style:italic;">break</span></span>
<span class="line"><span style="color:#ABB2BF;">    conn.</span><span style="color:#61AFEF;">close</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">run</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;font-style:italic;">ip</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;font-style:italic;">port</span><span style="color:#ABB2BF;">):</span></span>
<span class="line"><span style="color:#ABB2BF;">    server </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> socket.</span><span style="color:#61AFEF;">socket</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">    server.</span><span style="color:#61AFEF;">bind</span><span style="color:#ABB2BF;">((ip, port))</span></span>
<span class="line"><span style="color:#ABB2BF;">    server.</span><span style="color:#61AFEF;">listen</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;font-style:italic;">while</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">True</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;">        conn, addr </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> server.</span><span style="color:#61AFEF;">accept</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#61AFEF;">spawn</span><span style="color:#ABB2BF;">(comm, conn)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;font-style:italic;">if</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">__name__</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">==</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;__main__&#39;</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;">    g </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">spawn</span><span style="color:#ABB2BF;">(run, </span><span style="color:#98C379;">&#39;127.0.0.1&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">8001</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    g.</span><span style="color:#61AFEF;">join</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># client</span></span>
<span class="line"><span style="color:#C678DD;font-style:italic;">import</span><span style="color:#ABB2BF;"> socket</span></span>
<span class="line"><span style="color:#C678DD;font-style:italic;">from</span><span style="color:#ABB2BF;"> threading </span><span style="color:#C678DD;font-style:italic;">import</span><span style="color:#ABB2BF;"> Thread, current_thread</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">t_client</span><span style="color:#ABB2BF;">():</span></span>
<span class="line"><span style="color:#ABB2BF;">    client </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> socket.</span><span style="color:#61AFEF;">socket</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">    client.</span><span style="color:#61AFEF;">connect</span><span style="color:#ABB2BF;">((</span><span style="color:#98C379;">&#39;127.0.0.1&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">8001</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    num </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;font-style:italic;">while</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">True</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;">        msg </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">f</span><span style="color:#98C379;">&#39;</span><span style="color:#D19A66;">{</span><span style="color:#61AFEF;">current_thread</span><span style="color:#ABB2BF;">().name</span><span style="color:#D19A66;">}</span><span style="color:#98C379;"> say </span><span style="color:#D19A66;">{</span><span style="color:#ABB2BF;">num</span><span style="color:#D19A66;">}</span><span style="color:#98C379;">&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">        client.</span><span style="color:#61AFEF;">send</span><span style="color:#ABB2BF;">(msg.</span><span style="color:#61AFEF;">encode</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;utf-8&#39;</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#ABB2BF;">        data </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> client.</span><span style="color:#61AFEF;">recv</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1024</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(data.</span><span style="color:#61AFEF;">decode</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;utf-8&#39;</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#ABB2BF;">        num </span><span style="color:#56B6C2;">+=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;font-style:italic;">if</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">__name__</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">==</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;__main__&#39;</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;font-style:italic;">for</span><span style="color:#ABB2BF;"> _ </span><span style="color:#C678DD;font-style:italic;">in</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">range</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1000</span><span style="color:#ABB2BF;">):</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#61AFEF;">Thread</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">target</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">t_client).</span><span style="color:#61AFEF;">start</span><span style="color:#ABB2BF;">()</span></span></code></pre></div><p>理想状态：</p><p>​ 在多进程下创建多线程</p><p>​ 多线程下面创建协程</p><h2 id="io模型" tabindex="-1">IO模型 <a class="header-anchor" href="#io模型" aria-label="Permalink to &quot;IO模型&quot;">​</a></h2><p>这里我们研究的IO模型，针对的都是网络IO</p><ul><li>等待数据准备（waiting for the data to ready）</li><li>把数据从内核拷贝到进程（copy data）</li></ul><p>网络IO</p><ul><li><p>accept</p></li><li><p>recv</p></li><li><p>recvfrom</p></li></ul><h2 id="阻塞io模型" tabindex="-1">阻塞IO模型 <a class="header-anchor" href="#阻塞io模型" aria-label="Permalink to &quot;阻塞IO模型&quot;">​</a></h2><p><img src="`+y+'" alt="阻塞IO模型-导出"></p><h2 id="非阻塞io模型" tabindex="-1">非阻塞IO模型 <a class="header-anchor" href="#非阻塞io模型" aria-label="Permalink to &quot;非阻塞IO模型&quot;">​</a></h2><blockquote><p>尽可能把cpu抓在自己手里</p></blockquote><p><img src="'+i+`" alt="非阻塞IO模型-导出"></p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># 服务端</span></span>
<span class="line"><span style="color:#C678DD;font-style:italic;">import</span><span style="color:#ABB2BF;"> socket</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">server </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> socket.</span><span style="color:#61AFEF;">socket</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">server.</span><span style="color:#61AFEF;">setsockopt</span><span style="color:#ABB2BF;">(socket.</span><span style="color:#D19A66;">SOL_SOCKET</span><span style="color:#ABB2BF;">, socket.</span><span style="color:#D19A66;">SO_REUSEADDR</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">server.</span><span style="color:#61AFEF;">bind</span><span style="color:#ABB2BF;">((</span><span style="color:#98C379;">&#39;127.0.0.1&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">8080</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#ABB2BF;">server.</span><span style="color:#61AFEF;">listen</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">server.</span><span style="color:#61AFEF;">setblocking</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">False</span><span style="color:#ABB2BF;">)   </span><span style="color:#7F848E;font-style:italic;"># 所有的网络阻塞都会变成非阻塞</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">c_list </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> []</span></span>
<span class="line"><span style="color:#ABB2BF;">d_list </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> []</span></span>
<span class="line"><span style="color:#C678DD;font-style:italic;">while</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">True</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;font-style:italic;">try</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;">        conn, addr </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> server.</span><span style="color:#61AFEF;">accept</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">        c_list.</span><span style="color:#61AFEF;">append</span><span style="color:#ABB2BF;">(conn)</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;font-style:italic;">except</span><span style="color:#ABB2BF;"> BlockingIOError:</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#7F848E;font-style:italic;"># print(&#39;客户端数量：&#39;, len(c_list))</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;font-style:italic;">for</span><span style="color:#ABB2BF;"> conn </span><span style="color:#C678DD;font-style:italic;">in</span><span style="color:#ABB2BF;"> c_list:</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#C678DD;font-style:italic;">try</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;">                data </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> conn.</span><span style="color:#61AFEF;">recv</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1024</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">                </span><span style="color:#C678DD;font-style:italic;">if</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;font-style:italic;">not</span><span style="color:#ABB2BF;"> data:</span></span>
<span class="line"><span style="color:#ABB2BF;">                    conn.</span><span style="color:#61AFEF;">close</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">                    d_list.</span><span style="color:#61AFEF;">append</span><span style="color:#ABB2BF;">(conn)</span></span>
<span class="line"><span style="color:#ABB2BF;">                conn.</span><span style="color:#61AFEF;">send</span><span style="color:#ABB2BF;">(data.</span><span style="color:#61AFEF;">upper</span><span style="color:#ABB2BF;">())</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#C678DD;font-style:italic;">except</span><span style="color:#ABB2BF;"> BlockingIOError:</span></span>
<span class="line"><span style="color:#ABB2BF;">                </span><span style="color:#C678DD;font-style:italic;">pass</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#C678DD;font-style:italic;">except</span><span style="color:#ABB2BF;"> ConnectionResetError:</span></span>
<span class="line"><span style="color:#ABB2BF;">                conn.</span><span style="color:#61AFEF;">close</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">                d_list.</span><span style="color:#61AFEF;">append</span><span style="color:#ABB2BF;">(conn)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;font-style:italic;">for</span><span style="color:#ABB2BF;"> conn </span><span style="color:#C678DD;font-style:italic;">in</span><span style="color:#ABB2BF;"> d_list:</span></span>
<span class="line"><span style="color:#ABB2BF;">            c_list.</span><span style="color:#61AFEF;">remove</span><span style="color:#ABB2BF;">(conn)</span></span>
<span class="line"><span style="color:#ABB2BF;">        d_list.</span><span style="color:#61AFEF;">clear</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 客户端</span></span>
<span class="line"><span style="color:#C678DD;font-style:italic;">import</span><span style="color:#ABB2BF;"> socket</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">client </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> socket.</span><span style="color:#61AFEF;">socket</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">client.</span><span style="color:#61AFEF;">connect</span><span style="color:#ABB2BF;">((</span><span style="color:#98C379;">&#39;127.0.0.1&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">8080</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;font-style:italic;">while</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">True</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;">    client.</span><span style="color:#61AFEF;">send</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">b</span><span style="color:#98C379;">&#39;hello&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    data </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> client.</span><span style="color:#61AFEF;">recv</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1024</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(data)</span></span></code></pre></div><blockquote><p>缺点：cpu长时间空转，过于消耗cpu资源</p></blockquote><h2 id="io多路复用" tabindex="-1">IO多路复用 <a class="header-anchor" href="#io多路复用" aria-label="Permalink to &quot;IO多路复用&quot;">​</a></h2><p><img src="`+F+`" alt="IO多路复用-导出"></p><p>监管机制：</p><ul><li>select（windows，linux）32位机器上最大支持1024，64位机器上最大支持2048</li><li>poll（linux）监管的对象比select多得多，没有限制</li></ul><p>当监管对象特别多的时候，以上两个监管机制可能会出现极大的延迟响应</p><ul><li>epoll（linux）它给每一个监管对象都绑定了一个<strong>回调机制</strong>，一旦有响应回调机制就会把可读对象放入就绪链表，epoll只需要判断就绪链表是否为空，不需要每次都把所有的监管对象都遍历一遍，节省了cpu大量的时间，性能也得到了大幅度提升</li></ul><p>selectors</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># 服务端</span></span>
<span class="line"><span style="color:#C678DD;font-style:italic;">import</span><span style="color:#ABB2BF;"> socket</span></span>
<span class="line"><span style="color:#C678DD;font-style:italic;">import</span><span style="color:#ABB2BF;"> selectors</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">accept</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;font-style:italic;">server</span><span style="color:#ABB2BF;">):</span></span>
<span class="line"><span style="color:#ABB2BF;">    conn, addr </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> server.</span><span style="color:#61AFEF;">accept</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">    sel.</span><span style="color:#61AFEF;">register</span><span style="color:#ABB2BF;">(conn, selectors.</span><span style="color:#D19A66;">EVENT_READ</span><span style="color:#ABB2BF;">, read)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">read</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;font-style:italic;">conn</span><span style="color:#ABB2BF;">):</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;font-style:italic;">try</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;">        data </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> conn.</span><span style="color:#61AFEF;">recv</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1024</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;font-style:italic;">if</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;font-style:italic;">not</span><span style="color:#ABB2BF;"> data:</span></span>
<span class="line"><span style="color:#ABB2BF;">            conn.</span><span style="color:#61AFEF;">close</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">            sel.</span><span style="color:#61AFEF;">unregister</span><span style="color:#ABB2BF;">(conn)</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#C678DD;font-style:italic;">return</span></span>
<span class="line"><span style="color:#ABB2BF;">        conn.</span><span style="color:#61AFEF;">send</span><span style="color:#ABB2BF;">(data.</span><span style="color:#61AFEF;">upper</span><span style="color:#ABB2BF;">())</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;font-style:italic;">except</span><span style="color:#ABB2BF;"> ConnectionResetError:</span></span>
<span class="line"><span style="color:#ABB2BF;">        conn.</span><span style="color:#61AFEF;">close</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">        sel.</span><span style="color:#61AFEF;">unregister</span><span style="color:#ABB2BF;">(conn)</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;font-style:italic;">return</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">server </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> socket.</span><span style="color:#61AFEF;">socket</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">server.</span><span style="color:#61AFEF;">setsockopt</span><span style="color:#ABB2BF;">(socket.</span><span style="color:#D19A66;">SOL_SOCKET</span><span style="color:#ABB2BF;">, socket.</span><span style="color:#D19A66;">SO_REUSEADDR</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">server.</span><span style="color:#61AFEF;">bind</span><span style="color:#ABB2BF;">((</span><span style="color:#98C379;">&#39;127.0.0.1&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">8080</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#ABB2BF;">server.</span><span style="color:#61AFEF;">listen</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">server.</span><span style="color:#61AFEF;">setblocking</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">False</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">sel </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> selectors.</span><span style="color:#61AFEF;">DefaultSelector</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">sel.</span><span style="color:#61AFEF;">register</span><span style="color:#ABB2BF;">(server, selectors.</span><span style="color:#D19A66;">EVENT_READ</span><span style="color:#ABB2BF;">, accept)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;font-style:italic;">while</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">True</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;">    events </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> sel.</span><span style="color:#61AFEF;">select</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;font-style:italic;">for</span><span style="color:#ABB2BF;"> key, mask </span><span style="color:#C678DD;font-style:italic;">in</span><span style="color:#ABB2BF;"> events:</span></span>
<span class="line"><span style="color:#ABB2BF;">        callback </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> key.data</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#61AFEF;">callback</span><span style="color:#ABB2BF;">(key.fileobj)</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 客户端</span></span>
<span class="line"><span style="color:#C678DD;font-style:italic;">import</span><span style="color:#ABB2BF;"> socket</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">client </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> socket.</span><span style="color:#61AFEF;">socket</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">client.</span><span style="color:#61AFEF;">connect</span><span style="color:#ABB2BF;">((</span><span style="color:#98C379;">&#39;127.0.0.1&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">8080</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;font-style:italic;">while</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">True</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;">    client.</span><span style="color:#61AFEF;">send</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">b</span><span style="color:#98C379;">&#39;hello&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    data </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> client.</span><span style="color:#61AFEF;">recv</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1024</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(data)</span></span></code></pre></div><h2 id="异步io" tabindex="-1">异步IO <a class="header-anchor" href="#异步io" aria-label="Permalink to &quot;异步IO&quot;">​</a></h2><p>![截屏2023-05-19 17.51.17](public/截屏2023-05-19 17.51.17.png)</p><blockquote><p>效率最高效，用得最广泛</p></blockquote><p><img src="`+A+`" alt="public/"></p><p>asyncio (python3.4)</p><p>tornado、fastapi、django3、sanic、vibora、quart、twisted、aiohttp</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#98C379;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#98C379;">事件循环</span></span>
<span class="line"><span style="color:#98C379;">自动监测并执行我们添加给它的任务</span></span>
<span class="line"></span>
<span class="line"><span style="color:#98C379;">任务列表 = [任务a, 任务b......]</span></span>
<span class="line"><span style="color:#98C379;">while True:</span></span>
<span class="line"><span style="color:#98C379;">    可执行任务列表, 已完成任务列表 = 监测任务列表</span></span>
<span class="line"><span style="color:#98C379;">    for 任务 in 可执行任务列表：</span></span>
<span class="line"><span style="color:#98C379;">        执行任务</span></span>
<span class="line"><span style="color:#98C379;">        </span></span>
<span class="line"><span style="color:#98C379;">    for 任务 in 已完成任务列表：</span></span>
<span class="line"><span style="color:#98C379;">        移除任务</span></span>
<span class="line"><span style="color:#98C379;">        </span></span>
<span class="line"><span style="color:#98C379;">    终止事件循环</span></span>
<span class="line"><span style="color:#98C379;">&quot;&quot;&quot;</span></span></code></pre></div><p>await后面只能跟一种对象，可等待的对象（可等待的对象有以下三类）：</p><ul><li>协程对象</li></ul><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;font-style:italic;">import</span><span style="color:#ABB2BF;"> asyncio</span></span>
<span class="line"><span style="color:#C678DD;font-style:italic;">import</span><span style="color:#ABB2BF;"> time</span></span>
<span class="line"><span style="color:#C678DD;font-style:italic;">from</span><span style="color:#ABB2BF;"> threading </span><span style="color:#C678DD;font-style:italic;">import</span><span style="color:#ABB2BF;"> current_thread</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># python3.4</span></span>
<span class="line"><span style="color:#61AFEF;">@asyncio</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">coroutine</span></span>
<span class="line"><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">f1</span><span style="color:#ABB2BF;">():</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;f1 start&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#61AFEF;">current_thread</span><span style="color:#ABB2BF;">())</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;font-style:italic;">yield from</span><span style="color:#ABB2BF;"> asyncio.</span><span style="color:#61AFEF;">sleep</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;f1 end&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#61AFEF;">current_thread</span><span style="color:#ABB2BF;">())</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">@asyncio</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">coroutine</span></span>
<span class="line"><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">f2</span><span style="color:#ABB2BF;">():</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;f2 start&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#61AFEF;">current_thread</span><span style="color:#ABB2BF;">())</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;font-style:italic;">yield from</span><span style="color:#ABB2BF;"> asyncio.</span><span style="color:#61AFEF;">sleep</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;f2 end&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#61AFEF;">current_thread</span><span style="color:#ABB2BF;">())</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">tasks </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [</span><span style="color:#61AFEF;">f1</span><span style="color:#ABB2BF;">(), </span><span style="color:#61AFEF;">f2</span><span style="color:#ABB2BF;">()]</span></span>
<span class="line"><span style="color:#ABB2BF;">loop </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> asyncio.</span><span style="color:#61AFEF;">get_event_loop</span><span style="color:#ABB2BF;">()    </span><span style="color:#7F848E;font-style:italic;"># 产生（获取）一个事件循环</span></span>
<span class="line"><span style="color:#ABB2BF;">loop.</span><span style="color:#61AFEF;">run_until_complete</span><span style="color:#ABB2BF;">(asyncio.</span><span style="color:#61AFEF;">wait</span><span style="color:#ABB2BF;">(tasks))</span></span></code></pre></div><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;font-style:italic;">import</span><span style="color:#ABB2BF;"> asyncio</span></span>
<span class="line"><span style="color:#C678DD;font-style:italic;">import</span><span style="color:#ABB2BF;"> time</span></span>
<span class="line"><span style="color:#C678DD;font-style:italic;">from</span><span style="color:#ABB2BF;"> threading </span><span style="color:#C678DD;font-style:italic;">import</span><span style="color:#ABB2BF;"> current_thread</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># python3.5     async/await</span></span>
<span class="line"><span style="color:#C678DD;">async</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">f1</span><span style="color:#ABB2BF;">():</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;f1 start&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#61AFEF;">current_thread</span><span style="color:#ABB2BF;">())</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;font-style:italic;">await</span><span style="color:#ABB2BF;"> asyncio.</span><span style="color:#61AFEF;">sleep</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;f1 end&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#61AFEF;">current_thread</span><span style="color:#ABB2BF;">())</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">async</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">f2</span><span style="color:#ABB2BF;">():</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;f2 start&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#61AFEF;">current_thread</span><span style="color:#ABB2BF;">())</span></span>
<span class="line"><span style="color:#ABB2BF;">    data </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;font-style:italic;">await</span><span style="color:#ABB2BF;"> asyncio.</span><span style="color:#61AFEF;">sleep</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;结果&#39;</span><span style="color:#ABB2BF;">, data)</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;f2 end&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#61AFEF;">current_thread</span><span style="color:#ABB2BF;">())</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">tasks </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [</span><span style="color:#61AFEF;">f1</span><span style="color:#ABB2BF;">(), </span><span style="color:#61AFEF;">f2</span><span style="color:#ABB2BF;">()]</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># loop = asyncio.get_event_loop()    # 产生（获取）一个事件循环</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># loop.run_until_complete(asyncio.wait(tasks))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># python3.7</span></span>
<span class="line"><span style="color:#ABB2BF;">asyncio.</span><span style="color:#61AFEF;">run</span><span style="color:#ABB2BF;">(asyncio.</span><span style="color:#61AFEF;">wait</span><span style="color:#ABB2BF;">(tasks))</span></span></code></pre></div><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">async</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">recv</span><span style="color:#ABB2BF;">():</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;进入IO&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;font-style:italic;">await</span><span style="color:#ABB2BF;"> asyncio.</span><span style="color:#61AFEF;">sleep</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;结束IO&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;font-style:italic;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;hello&#39;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">async</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">f1</span><span style="color:#ABB2BF;">():</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;f1 start&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#61AFEF;">current_thread</span><span style="color:#ABB2BF;">())</span></span>
<span class="line"><span style="color:#ABB2BF;">    data </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;font-style:italic;">await</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">recv</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;结果&#39;</span><span style="color:#ABB2BF;">, data)</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;f1 end&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#61AFEF;">current_thread</span><span style="color:#ABB2BF;">())</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">async</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">f2</span><span style="color:#ABB2BF;">():</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;f2 start&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#61AFEF;">current_thread</span><span style="color:#ABB2BF;">())</span></span>
<span class="line"><span style="color:#ABB2BF;">    data </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;font-style:italic;">await</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">recv</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;结果&#39;</span><span style="color:#ABB2BF;">, data)</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;f2 end&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#61AFEF;">current_thread</span><span style="color:#ABB2BF;">())</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">tasks </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [</span><span style="color:#61AFEF;">f1</span><span style="color:#ABB2BF;">(), </span><span style="color:#61AFEF;">f2</span><span style="color:#ABB2BF;">()]</span></span>
<span class="line"><span style="color:#ABB2BF;">asyncio.</span><span style="color:#61AFEF;">run</span><span style="color:#ABB2BF;">(asyncio.</span><span style="color:#61AFEF;">wait</span><span style="color:#ABB2BF;">(tasks))</span></span></code></pre></div><ul><li>Task对象</li></ul><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;font-style:italic;">import</span><span style="color:#ABB2BF;"> asyncio</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">async</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">nested</span><span style="color:#ABB2BF;">():</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;font-style:italic;">await</span><span style="color:#ABB2BF;"> asyncio.</span><span style="color:#61AFEF;">sleep</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;font-style:italic;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">42</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">async</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">main</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;font-style:italic;">name</span><span style="color:#ABB2BF;">):</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(name, </span><span style="color:#98C379;">&#39;start&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;"># Schedule nested() to run soon concurrently</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;"># with &quot;main()&quot;.</span></span>
<span class="line"><span style="color:#ABB2BF;">    task </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> asyncio.</span><span style="color:#61AFEF;">create_task</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">nested</span><span style="color:#ABB2BF;">())</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;"># &quot;task&quot; can now be used to cancel &quot;nested()&quot;, or</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;"># can simply be awaited to wait until it is complete:</span></span>
<span class="line"><span style="color:#ABB2BF;">    res </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;font-style:italic;">await</span><span style="color:#ABB2BF;"> task</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(res)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">asyncio.</span><span style="color:#61AFEF;">run</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">main</span><span style="color:#ABB2BF;">())</span></span></code></pre></div><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;font-style:italic;">import</span><span style="color:#ABB2BF;"> asyncio</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">async</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">nested</span><span style="color:#ABB2BF;">():</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;进入IO&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;font-style:italic;">await</span><span style="color:#ABB2BF;"> asyncio.</span><span style="color:#61AFEF;">sleep</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;结束IO&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;font-style:italic;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">42</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">async</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">main</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;font-style:italic;">name</span><span style="color:#ABB2BF;">):</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(name, </span><span style="color:#98C379;">&#39;start&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    task_list </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [</span></span>
<span class="line"><span style="color:#ABB2BF;">        asyncio.</span><span style="color:#61AFEF;">create_task</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">nested</span><span style="color:#ABB2BF;">(), </span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&#39;a&#39;</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#ABB2BF;">        asyncio.</span><span style="color:#61AFEF;">create_task</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">nested</span><span style="color:#ABB2BF;">(), </span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&#39;b&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    ]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    done, pending </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;font-style:italic;">await</span><span style="color:#ABB2BF;"> asyncio.</span><span style="color:#61AFEF;">wait</span><span style="color:#ABB2BF;">(task_list)</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;font-style:italic;">for</span><span style="color:#ABB2BF;"> task </span><span style="color:#C678DD;font-style:italic;">in</span><span style="color:#ABB2BF;"> done:</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(task.</span><span style="color:#61AFEF;">result</span><span style="color:#ABB2BF;">(), task.</span><span style="color:#61AFEF;">get_name</span><span style="color:#ABB2BF;">())</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">asyncio.</span><span style="color:#61AFEF;">run</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">main</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;任务1&#39;</span><span style="color:#ABB2BF;">))</span></span></code></pre></div><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;font-style:italic;">import</span><span style="color:#ABB2BF;"> asyncio</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">async</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">nested</span><span style="color:#ABB2BF;">():</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;进入IO&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;font-style:italic;">await</span><span style="color:#ABB2BF;"> asyncio.</span><span style="color:#61AFEF;">sleep</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;结束IO&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;font-style:italic;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">42</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">task_list </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">nested</span><span style="color:#ABB2BF;">(),</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">nested</span><span style="color:#ABB2BF;">(),</span></span>
<span class="line"><span style="color:#ABB2BF;">]</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">done, pending </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> asyncio.</span><span style="color:#61AFEF;">run</span><span style="color:#ABB2BF;">(asyncio.</span><span style="color:#61AFEF;">wait</span><span style="color:#ABB2BF;">(task_list))</span></span>
<span class="line"><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(done)</span></span></code></pre></div><ul><li>Future对象(Task的基类)</li></ul><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;font-style:italic;">import</span><span style="color:#ABB2BF;"> asyncio</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">async</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">f1</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;font-style:italic;">future</span><span style="color:#ABB2BF;">):</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;font-style:italic;">await</span><span style="color:#ABB2BF;"> asyncio.</span><span style="color:#61AFEF;">sleep</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    future.</span><span style="color:#61AFEF;">set_result</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;hello&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">async</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">main</span><span style="color:#ABB2BF;">():</span></span>
<span class="line"><span style="color:#ABB2BF;">    loop </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> asyncio.</span><span style="color:#61AFEF;">get_running_loop</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">    future </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> loop.</span><span style="color:#61AFEF;">create_future</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">    loop.</span><span style="color:#61AFEF;">create_task</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">f1</span><span style="color:#ABB2BF;">(future))</span></span>
<span class="line"><span style="color:#ABB2BF;">    res </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;font-style:italic;">await</span><span style="color:#ABB2BF;"> future</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(res)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">asyncio.</span><span style="color:#61AFEF;">run</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">main</span><span style="color:#ABB2BF;">())</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 进程/线程池的Future对象与asyncio的Future对象混合使用</span></span>
<span class="line"><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">f1</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;font-style:italic;">x</span><span style="color:#ABB2BF;">):</span></span>
<span class="line"><span style="color:#ABB2BF;">    time.</span><span style="color:#61AFEF;">sleep</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;font-style:italic;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;hello&#39;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">async</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">main</span><span style="color:#ABB2BF;">():</span></span>
<span class="line"><span style="color:#ABB2BF;">    loop </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> asyncio.</span><span style="color:#61AFEF;">get_running_loop</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">    future </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> loop.</span><span style="color:#61AFEF;">run_in_executor</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">None</span><span style="color:#ABB2BF;">, f1, </span><span style="color:#98C379;">&#39;xxx&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    res </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;font-style:italic;">await</span><span style="color:#ABB2BF;"> future</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(res)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">asyncio.</span><span style="color:#61AFEF;">run</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">main</span><span style="color:#ABB2BF;">())</span></span></code></pre></div><p>阻塞操作必须替换成相应的异步库提供的函数：</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#98C379;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#98C379;">time.sleep() -&gt; asyncio.sleep()</span></span>
<span class="line"><span style="color:#98C379;">server.accept() -&gt; loop.sock_accept()</span></span>
<span class="line"><span style="color:#98C379;">conn.recv() -&gt; loop.sock_recv()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#98C379;">第三方异步库</span></span>
<span class="line"><span style="color:#98C379;">aiofiles、aiohttp、aiomysql、tornado、fastapi、django3、sanic、vibora、quart、twisted...</span></span>
<span class="line"><span style="color:#98C379;">&quot;&quot;&quot;</span></span></code></pre></div><h2 id="异步迭代器" tabindex="-1">异步迭代器 <a class="header-anchor" href="#异步迭代器" aria-label="Permalink to &quot;异步迭代器&quot;">​</a></h2><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#98C379;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#98C379;">迭代器：内置有__iter__方法、__next__方法的对象</span></span>
<span class="line"><span style="color:#98C379;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">MyRange</span><span style="color:#ABB2BF;">(</span><span style="color:#56B6C2;">object</span><span style="color:#ABB2BF;">):</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">__init__</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;font-style:italic;">self</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;font-style:italic;">start</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;font-style:italic;">end</span><span style="color:#ABB2BF;">=</span><span style="color:#D19A66;">None</span><span style="color:#ABB2BF;">):</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;font-style:italic;">if</span><span style="color:#ABB2BF;"> end:</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;">.count </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> start </span><span style="color:#56B6C2;">-</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;">.end </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> end</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;font-style:italic;">else</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;">.count </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">-</span><span style="color:#D19A66;">1</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;">.end </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> start</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">add_count</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;font-style:italic;">self</span><span style="color:#ABB2BF;">):</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;">.count </span><span style="color:#56B6C2;">+=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;font-style:italic;">if</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;">.count </span><span style="color:#56B6C2;">==</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;">.end:</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#C678DD;font-style:italic;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">None</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;font-style:italic;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;">.count</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">__iter__</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;font-style:italic;">self</span><span style="color:#ABB2BF;">):</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;font-style:italic;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">self</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">__next__</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;font-style:italic;">self</span><span style="color:#ABB2BF;">):</span></span>
<span class="line"><span style="color:#ABB2BF;">        value </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">add_count</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;font-style:italic;">if</span><span style="color:#ABB2BF;"> value </span><span style="color:#C678DD;font-style:italic;">is</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">None</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#C678DD;font-style:italic;">raise</span><span style="color:#ABB2BF;"> StopIteration</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;font-style:italic;">return</span><span style="color:#ABB2BF;"> value</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;font-style:italic;">for</span><span style="color:#ABB2BF;"> i </span><span style="color:#C678DD;font-style:italic;">in</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">MyRange</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">):</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(i)</span></span></code></pre></div><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#98C379;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#98C379;">异步迭代器：内置有__aiter__方法、__anext__方法的对象</span></span>
<span class="line"><span style="color:#98C379;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">MyRange</span><span style="color:#ABB2BF;">(</span><span style="color:#56B6C2;">object</span><span style="color:#ABB2BF;">):</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">__init__</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;font-style:italic;">self</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;font-style:italic;">start</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;font-style:italic;">end</span><span style="color:#ABB2BF;">=</span><span style="color:#D19A66;">None</span><span style="color:#ABB2BF;">):</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;font-style:italic;">if</span><span style="color:#ABB2BF;"> end:</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;">.count </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> start </span><span style="color:#56B6C2;">-</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;">.end </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> end</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;font-style:italic;">else</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;">.count </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">-</span><span style="color:#D19A66;">1</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;">.end </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> start</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">async</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">add_count</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;font-style:italic;">self</span><span style="color:#ABB2BF;">):</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;font-style:italic;">await</span><span style="color:#ABB2BF;"> asyncio.</span><span style="color:#61AFEF;">sleep</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;">.count </span><span style="color:#56B6C2;">+=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;font-style:italic;">if</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;">.count </span><span style="color:#56B6C2;">==</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;">.end:</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#C678DD;font-style:italic;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">None</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;font-style:italic;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;">.count</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">__aiter__</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;font-style:italic;">self</span><span style="color:#ABB2BF;">):</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;font-style:italic;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">self</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">async</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">__anext__</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;font-style:italic;">self</span><span style="color:#ABB2BF;">):</span></span>
<span class="line"><span style="color:#ABB2BF;">        value </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;font-style:italic;">await</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">add_count</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;font-style:italic;">if</span><span style="color:#ABB2BF;"> value </span><span style="color:#C678DD;font-style:italic;">is</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">None</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#C678DD;font-style:italic;">raise</span><span style="color:#ABB2BF;"> StopAsyncIteration</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;font-style:italic;">return</span><span style="color:#ABB2BF;"> value</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">async</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">main</span><span style="color:#ABB2BF;">():</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;font-style:italic;">async</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;font-style:italic;">for</span><span style="color:#ABB2BF;"> i </span><span style="color:#C678DD;font-style:italic;">in</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">MyRange</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">):</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(i)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">asyncio.</span><span style="color:#61AFEF;">run</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">main</span><span style="color:#ABB2BF;">())</span></span></code></pre></div><h2 id="异步上下文管理器" tabindex="-1">异步上下文管理器 <a class="header-anchor" href="#异步上下文管理器" aria-label="Permalink to &quot;异步上下文管理器&quot;">​</a></h2><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#98C379;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#98C379;">上下文管理器：</span></span>
<span class="line"><span style="color:#98C379;">with open()as f:</span></span>
<span class="line"><span style="color:#98C379;">对象内部需要定义__enter__方法、__exit__方法</span></span>
<span class="line"><span style="color:#98C379;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Client</span><span style="color:#ABB2BF;">(</span><span style="color:#56B6C2;">object</span><span style="color:#ABB2BF;">):</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">__init__</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;font-style:italic;">self</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;font-style:italic;">ip</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;font-style:italic;">port</span><span style="color:#ABB2BF;">):</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;">.ip </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> ip</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;">.port </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> port</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">recv</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;font-style:italic;">self</span><span style="color:#ABB2BF;">):</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;font-style:italic;">pass</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">__enter__</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;font-style:italic;">self</span><span style="color:#ABB2BF;">):</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;">.c </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> socket.</span><span style="color:#61AFEF;">socket</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;">.c.</span><span style="color:#61AFEF;">connect</span><span style="color:#ABB2BF;">((</span><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;">.ip, </span><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;">.port))</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;font-style:italic;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">self</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">__exit__</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;font-style:italic;">self</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;font-style:italic;">exc_type</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;font-style:italic;">exc_val</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;font-style:italic;">exc_tb</span><span style="color:#ABB2BF;">):</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;">.c.</span><span style="color:#61AFEF;">close</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;font-style:italic;">with</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Client</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;127.0.0.1&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">8080</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;font-style:italic;">as</span><span style="color:#ABB2BF;"> f:</span></span>
<span class="line"><span style="color:#ABB2BF;">    f.</span><span style="color:#61AFEF;">recv</span><span style="color:#ABB2BF;">()</span></span></code></pre></div><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#98C379;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#98C379;">异步上下文管理器：</span></span>
<span class="line"><span style="color:#98C379;">async def main():</span></span>
<span class="line"><span style="color:#98C379;">    async with Client()as f:</span></span>
<span class="line"><span style="color:#98C379;">        data = await c.recv()</span></span>
<span class="line"><span style="color:#98C379;">对象内部需要定义__aenter__方法、__aexit__方法</span></span>
<span class="line"><span style="color:#98C379;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Client</span><span style="color:#ABB2BF;">(</span><span style="color:#56B6C2;">object</span><span style="color:#ABB2BF;">):</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">__init__</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;font-style:italic;">self</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;font-style:italic;">ip</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;font-style:italic;">port</span><span style="color:#ABB2BF;">):</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;">.ip </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> ip</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;">.port </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> port</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;">.loop </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> asyncio.</span><span style="color:#61AFEF;">get_running_loop</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">async</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">recv</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;font-style:italic;">self</span><span style="color:#ABB2BF;">):</span></span>
<span class="line"><span style="color:#ABB2BF;">        data </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;font-style:italic;">await</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;">.loop.</span><span style="color:#61AFEF;">sock_recv</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;">.c, </span><span style="color:#D19A66;">1024</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;font-style:italic;">return</span><span style="color:#ABB2BF;"> data</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">async</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">send</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;font-style:italic;">self</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;font-style:italic;">data</span><span style="color:#ABB2BF;">):</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;font-style:italic;">await</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;">.loop.</span><span style="color:#61AFEF;">sock_sendall</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;">.c, data.</span><span style="color:#61AFEF;">encode</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;utf-8&#39;</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">async</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">__aenter__</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;font-style:italic;">self</span><span style="color:#ABB2BF;">):</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;">.c </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> socket.</span><span style="color:#61AFEF;">socket</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#7F848E;font-style:italic;"># self.c.connect((self.ip, self.port))</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#7F848E;font-style:italic;"># 异步连接服务端</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;font-style:italic;">await</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;">.loop.</span><span style="color:#61AFEF;">sock_connect</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;">.c, (</span><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;">.ip, </span><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;">.port))</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;font-style:italic;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">self</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">async</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">__aexit__</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;font-style:italic;">self</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;font-style:italic;">exc_type</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;font-style:italic;">exc_val</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;font-style:italic;">exc_tb</span><span style="color:#ABB2BF;">):</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;">.c.</span><span style="color:#61AFEF;">close</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">async</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">main</span><span style="color:#ABB2BF;">():</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;font-style:italic;">async</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;font-style:italic;">with</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Client</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;127.0.0.1&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">8080</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;font-style:italic;">as</span><span style="color:#ABB2BF;"> f:</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;font-style:italic;">await</span><span style="color:#ABB2BF;"> f.</span><span style="color:#61AFEF;">send</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;abc&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">        data </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;font-style:italic;">await</span><span style="color:#ABB2BF;"> f.</span><span style="color:#61AFEF;">recv</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(data)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">asyncio.</span><span style="color:#61AFEF;">run</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">main</span><span style="color:#ABB2BF;">())</span></span></code></pre></div>`,179),f=[D];function d(u,E,h,m,_,g){return n(),a("div",null,f)}const q=s(C,[["render",d]]);export{b as __pageData,q as default};
